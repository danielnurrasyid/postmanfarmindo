{
	"info": {
		"_postman_id": "0ac8845e-2c8a-4d89-b3cb-ea0ec6ab76ae",
		"name": "Farmindo Automation Full Cycle Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login QA",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0bac80b0-7e15-4be4-b662-c2f047e1f0ed",
						"exec": [
							"let bodyData = pm.response.json()\r",
							"let token = bodyData.token\r",
							"\r",
							"pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"\r",
							"    pm.test(\"Token Berhasil didapatkan!\",function(){\r",
							"        pm.expect(pm.response.token).not.null\r",
							"        pm.environment.set(\"tokenQA\", token)\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "98031db1-c95f-4b5a-84e0-732aa598c85e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "manual#2022",
						"username": "manual"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": "https://testingqa-office.nexcloud.id/testingqa/login"
			},
			"response": []
		},
		{
			"name": "Get Latest Filename",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8293247a-bfe5-47fc-ad9f-c8b8809f949f",
						"exec": [
							"let bodyData = pm.response.json()\r",
							"let token = bodyData.token\r",
							"\r",
							"pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"\r",
							"    pm.test(\"FileName Berhasil didapatkan!\",function(){\r",
							"        pm.expect(pm.response.fileName).not.null\r",
							"        pm.environment.set(\"fileName\",pm.response.json().fileName)\r",
							"    })\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c29bfb0a-bc30-4c78-a0ef-64a38aec94b5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": "https://testingqa-office.nexcloud.id/testingqa/farmindo/getlatestfilename"
			},
			"response": []
		},
		{
			"name": "Get PO PreIncoming",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "066fe766-728e-4ab6-b531-d2d5b5d92385",
						"exec": [
							"const customer = JSON.parse(pm.environment.get(\"LIST_CUSTOMER\"))\r",
							"const action = JSON.parse(pm.environment.get(\"LIST_ACTION\"))\r",
							"const status = JSON.parse(pm.environment.get(\"LIST_STATUS\"))\r",
							"const messages = JSON.parse(pm.environment.get(\"LIST_MESSAGES\"))\r",
							"let responsesBody = pm.response.json();  // create variable to get response body\r",
							"let responseObjPreIncoming = {};    // create object\r",
							"Object.keys(responsesBody[0]).forEach(function(key){ // looping each keys store it to responseObjPreIncoming[key]\r",
							"    responseObjPreIncoming[key] = responsesBody[0][key];\r",
							"});\r",
							"\r",
							"pm.environment.set(\"indexAwalNoPO\",Number(0))\r",
							"pm.environment.set(\"indexAwalDetail\",Number(0))\r",
							"\r",
							"// set responseObjPreIncoming with json format to responseObjPreIncomingPreIncoming as environment variable\r",
							"pm.environment.set(\"responseObjPreIncoming\", JSON.stringify(responseObjPreIncoming));\r",
							"\r",
							"pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"\r",
							"    pm.test(\"Status Pre Incoming - Farmindo PO \" + responseObjPreIncoming.status + \"!\",function(){\r",
							"    \r",
							"        pm.test(\"id Terisi\",function(){\r",
							"            pm.expect(responseObjPreIncoming.id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"customer Terisi\",function(){\r",
							"            pm.expect(responseObjPreIncoming.customer).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"Customer \" + responseObjPreIncoming.customer + \" ada di List Customer\",function(){\r",
							"            pm.expect(Object.values(customer).includes(responseObjPreIncoming.customer)).to.be.true;\r",
							"        })\r",
							"\r",
							"        pm.test(\"fileName Terisi\",function(){\r",
							"            pm.expect(responseObjPreIncoming.fileName).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"action Terisi\",function(){\r",
							"            pm.expect(responseObjPreIncoming.action).not.null\r",
							"        })\r",
							"    \r",
							"        pm.test(\"Action \" + responseObjPreIncoming.action + \" ada di List Action\",function(){\r",
							"            pm.expect(Object.values(action).includes(responseObjPreIncoming.action)).to.be.true;\r",
							"        })\r",
							"\r",
							"        pm.test(\"fileIn Terisi\",function(){\r",
							"            pm.expect(responseObjPreIncoming.fileIn).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"md5 Terisi\",function(){\r",
							"            pm.expect(responseObjPreIncoming.md5).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"Status \" + responseObjPreIncoming.status + \" ada di List Status\",function(){\r",
							"            pm.expect(Object.values(status).includes(responseObjPreIncoming.status)).to.be.true;\r",
							"        })\r",
							"\r",
							"        switch(responseObjPreIncoming.action){\r",
							"            case action.Matching:\r",
							"                pm.test(\"Status Terisi success matching po\",function(){\r",
							"                    pm.expect(responseObjPreIncoming.message).to.eql(messages.Matching)\r",
							"                })\r",
							"            break\r",
							"            case action.Split:\r",
							"                pm.test(\"Status Terisi success split po\",function(){\r",
							"                    pm.expect(responseObjPreIncoming.message).to.eql(messages.Split)\r",
							"                })\r",
							"            break\r",
							"            case action.Normal:\r",
							"                pm.test(\"Status Terisi success proccess normal po\",function(){\r",
							"                    pm.expect(responseObjPreIncoming.message).to.eql(messages.Normal)\r",
							"                })\r",
							"            break\r",
							"            case action.Transform:\r",
							"                pm.test(\"Status Terisi success trasnform po\",function(){\r",
							"                    pm.expect(responseObjPreIncoming.message).to.eql(messages.Transform)\r",
							"                })\r",
							"            break\r",
							"        }\r",
							"\r",
							"        switch(responseObjPreIncoming.status){\r",
							"            case status.Success:\r",
							"                pm.expect(responseObjPreIncoming.status).to.eql(status.Success)\r",
							"                console.log(\"Status Pre Incoming SUCCESS, Continue!\")\r",
							"                console.log(\"Message System : \" + responseObjPreIncoming.message)\r",
							"                pm.environment.set(\"preIncomingId\",responseObjPreIncoming.id)\r",
							"            break\r",
							"            case status.Process:\r",
							"                pm.expect(responseObjPreIncoming.status).to.eql(status.Process)\r",
							"                console.log(\"Status Pre Incoming PROCESS, Break!\")\r",
							"                console.log(\"Message System : \" + responseObjPreIncoming.message)\r",
							"                postman.setNextRequest(null)\r",
							"            break\r",
							"            case status.Failed:\r",
							"                pm.expect(responseObjPreIncoming.status).to.eql(status.Failed)\r",
							"                console.log(\"Status Pre Incoming FAILED, Break!\")\r",
							"                console.log(\"Message System : \" + responseObjPreIncoming.message)\r",
							"                postman.setNextRequest(null)\r",
							"            break\r",
							"        }  \r",
							"    })\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "89661a0f-4287-4392-983b-a1c0baff5014",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f4ebd2ff-1cb7-4274-be3c-8210a680d25d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://testingqa-office.nexcloud.id/testingqa/farmindo/preincoming?fileName={{fileName}}",
					"protocol": "https",
					"host": [
						"testingqa-office",
						"nexcloud",
						"id"
					],
					"path": [
						"testingqa",
						"farmindo",
						"preincoming"
					],
					"query": [
						{
							"key": "fileName",
							"value": "{{fileName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PO Incoming",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af636170-8918-4bdf-ad13-33fb318efd32",
						"exec": [
							"const customer = JSON.parse(pm.environment.get(\"LIST_CUSTOMER\"))\r",
							"const principal = JSON.parse(pm.environment.get(\"LIST_PRINCIPAL\"))\r",
							"const status = JSON.parse(pm.environment.get(\"LIST_STATUS\"))\r",
							"const messages = JSON.parse(pm.environment.get(\"LIST_MESSAGES\"))\r",
							"let responsesBody = pm.response.json();\r",
							"let arrayDataPoIncoming = [];\r",
							"let responsePreIncoming = JSON.parse(pm.environment.get(\"responseObjPreIncoming\"))\r",
							"let indexNoPO = pm.environment.get(\"indexAwalNoPO\")\r",
							"\r",
							"responsesBody.forEach(function(obj){\r",
							"    arrayDataPoIncoming.push(obj);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"arrayObjDataPOIncoming\", JSON.stringify(arrayDataPoIncoming.sort(function(a,b){return a.id - b.id})))\r",
							"\r",
							"pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"\r",
							"    if(arrayDataPoIncoming[indexNoPO].principalCode == principal.Png){\r",
							"        pm.environment.set(\"sellerName\",\"pg\")\r",
							"    }else{\r",
							"        pm.environment.set(\"sellerName\",arrayDataPoIncoming[indexNoPO]?.principalCode.toLowerCase())\r",
							"        pm.environment.set(\"sellerName\",arrayDataPoIncoming[indexNoPO].principalCode.toLowerCase())\r",
							"    }\r",
							"    \r",
							"    pm.test(\"Status PO Incoming - Farmindo PO pada NoPO \" + arrayDataPoIncoming[indexNoPO].noPO + \" \"+ arrayDataPoIncoming[indexNoPO].status + \"!\", function(){\r",
							"\r",
							"        if(arrayDataPoIncoming[indexNoPO].status === status.Success){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].status).to.eql(status.Success)\r",
							"        } else if(arrayDataPoIncoming[indexNoPO].status === status.Success_with_unmapped){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].status).to.eql(status.Success_with_unmapped)\r",
							"        } else if(arrayDataPoIncoming[indexNoPO].status === status.Success_without_send_flatfile){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].status).to.eql(status.Success_without_send_flatfile)\r",
							"        }\r",
							"\r",
							"        pm.test(\"id Terisi \" + arrayDataPoIncoming[indexNoPO].id,function(){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"preIncomingId Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].preIncomingId).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"preIncomingId PO Incoming Farmindo PO \" + arrayDataPoIncoming[indexNoPO].preIncomingId + \", dengan id Pre Incoming Farmindo PO \" + responsePreIncoming.id + \" Sesuai\",function(){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].preIncomingId).to.eql(responsePreIncoming.id)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerCode Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].customerCode).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"Customer \" + arrayDataPoIncoming[indexNoPO].customerCode + \" ada di LIST_CUSTOMER\", function(){\r",
							"            pm.expect(Object.values(customer).includes(arrayDataPoIncoming[indexNoPO].customerCode)).to.be.true\r",
							"        })\r",
							"\r",
							"        pm.test(\"principalCode Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].principalCode).not.null\r",
							"        })\r",
							"\r",
							"        if(arrayDataPoIncoming[indexNoPO].principalCode !== ''){\r",
							"            pm.test(\"Principal \" + arrayDataPoIncoming[indexNoPO].principalCode + \" ada di LIST_PRINCIPAL\", function(){\r",
							"                pm.expect(Object.values(principal).includes(arrayDataPoIncoming[indexNoPO].principalCode)).to.be.true\r",
							"            })\r",
							"        }\r",
							"        \r",
							"\r",
							"        pm.test(\"poFileName Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].poFileName).not.null\r",
							"        })\r",
							"        \r",
							"        pm.test(\"poFile Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].poFile).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"md5 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].md5).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"noPO Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncoming[indexNoPO].noPO).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"Status \" + arrayDataPoIncoming[indexNoPO].status + \" ada di LIST_STATUS\", function(){    pm.expect(Object.values(status).includes(arrayDataPoIncoming[indexNoPO].status)).to.be.true\r",
							"        })                              \r",
							"\r",
							"        pm.test(\"Customer Pre Incoming Farmindo PO \" + responsePreIncoming.customer+ \", dengan Customer PO Incoming Farmindo PO \" + arrayDataPoIncoming[indexNoPO].customerCode + \" Sesuai\",function(){\r",
							"            if(responsePreIncoming.customer === customer.Lotte){\r",
							"\r",
							"                pm.expect(arrayDataPoIncoming[indexNoPO].customerCode).to.be.oneOf([customer.Makroindo, customer.Lotte])\r",
							"\r",
							"            } else if(responsePreIncoming.customer === customer.Alfamart){\r",
							"                pm.expect(arrayDataPoIncoming[indexNoPO].customerCode).to.be.oneOf([customer.Alfamart, customer.Alfamidi])\r",
							"\r",
							"            } else if(responsePreIncoming.customer === customer.Acehardware){\r",
							"                pm.expect(arrayDataPoIncoming[indexNoPO].customerCode).to.be.oneOf([customer.Toyskingdom, customer.Acehardware, customer.Informa])\r",
							"            } else {\r",
							"                pm.expect(arrayDataPoIncoming[indexNoPO].customerCode).to.eql(responsePreIncoming.customer)\r",
							"            }\r",
							"        })\r",
							"\r",
							"        \r",
							"        switch(arrayDataPoIncoming[indexNoPO].status){\r",
							"            case status.Success:\r",
							"                pm.test(\"Message Terisi SUCCESS PARSER FILE\",function(){\r",
							"                    pm.expect(arrayDataPoIncoming[indexNoPO].message === messages.Success)\r",
							"                })\r",
							"                pm.environment.set(\"poNumber\",arrayDataPoIncoming[indexNoPO].noPO)\r",
							"                console.log(\"Run PO Incoming indexNoPO ke \" + indexNoPO + \" Dengan NoPO \" + arrayDataPoIncoming[indexNoPO].noPO + \" status SUCCESS, Continue!\")\r",
							"\r",
							"                console.log(`IndexNopo Success ${indexNoPO}`)\r",
							"                if(arrayDataPoIncoming.length - 1 === indexNoPO){\r",
							"                        postman.setNextRequest(null)\r",
							"                }\r",
							"                postman.setNextRequest(\"Get PO Incoming by Seller\")\r",
							"            break\r",
							"            case status.Success_with_unmapped:\r",
							"                pm.test(\"Message Terisi SUCCESS PARSER WITH UNMAPPED PRODUCT\",function(){\r",
							"                    pm.expect(arrayDataPoIncoming[indexNoPO].message === messages.Success_with_unmapped)\r",
							"                })\r",
							"                pm.environment.set(\"poNumber\",arrayDataPoIncoming[indexNoPO].noPO)\r",
							"                console.log(\"Run PO Incoming indexNoPO ke \" + indexNoPO + \" Dengan NoPO \" + arrayDataPoIncoming[indexNoPO].noPO + \" status SUCCESS_WITH_UNMAPPED, Continue!\")\r",
							"\r",
							"                console.log(`IndexNopo Success with unmapped ${indexNoPO}`)\r",
							"                if(arrayDataPoIncoming.length - 1 === indexNoPO){\r",
							"                        postman.setNextRequest(null)\r",
							"                }\r",
							"                postman.setNextRequest(\"Get PO Incoming by Seller\")\r",
							"            break\r",
							"            case status.Success_without_send_flatfile:\r",
							"                pm.test(\"Message Terisi 530 Login incorrect.\",function(){\r",
							"                    pm.expect(arrayDataPoIncoming[indexNoPO].message).to.eql(messages.Success_without_send_flatfile)\r",
							"                })\r",
							"                pm.environment.set(\"poNumber\",arrayDataPoIncoming[indexNoPO].noPO)\r",
							"                console.log(\"Run PO Incoming indexNoPO ke \" + indexNoPO + \" Dengan NoPO \" + arrayDataPoIncoming[indexNoPO].noPO + \" status SUCCESS WITHOUT SEND FLAT FILE, Continue!\")\r",
							"\r",
							"                console.log(`IndexNopo Success without send flatfile ${indexNoPO}`)\r",
							"                if(arrayDataPoIncoming.length - 1 === indexNoPO){\r",
							"                        postman.setNextRequest(null)\r",
							"                }\r",
							"                postman.setNextRequest(\"Get PO Incoming by Seller\")\r",
							"            break\r",
							"            case status.Failed:\r",
							"                pm.test(\"Status PO FAILED, Break!\",function(){\r",
							"                    console.log(\"Run PO Incoming indexNoPO ke \" + indexNoPO + \" Dengan NoPO \" + arrayDataPoIncoming[indexNoPO].noPO + \" status FAILED, Message : \" + arrayDataPoIncoming[indexNoPO].message + \", Break!\")\r",
							"                })\r",
							"                \r",
							"                console.log(`IndexNopo Failed ${indexNoPO}`)\r",
							"                if(arrayDataPoIncoming.length - 1 > indexNoPO){\r",
							"                    pm.environment.set(\"indexAwalNoPO\",Number(indexNoPO + 1))\r",
							"                    postman.setNextRequest(\"Get PO Incoming\")\r",
							"                }else{\r",
							"                    postman.setNextRequest(null)\r",
							"                }\r",
							"                \r",
							"                \r",
							"            break\r",
							"            case status.Process:\r",
							"                pm.test(\"Status PO PROCESS, Break!\",function(){\r",
							"                    console.log(\"Run PO Incoming indexNoPO ke \" + indexNoPO + \" Dengan NoPO \" + arrayDataPoIncoming[indexNoPO].noPO + \" status PROCESS, Message : \" + arrayDataPoIncoming[indexNoPO].message + \", Break!\")\r",
							"                })\r",
							"\r",
							"                console.log(`IndexNopo Process ${indexNoPO}`)\r",
							"                if(arrayDataPoIncoming.length - 1 > indexNoPO){\r",
							"                    pm.environment.set(\"indexAwalNoPO\",Number(indexNoPO + 1))\r",
							"                    postman.setNextRequest(\"Get PO Incoming\")\r",
							"                }else{\r",
							"                    postman.setNextRequest(null)\r",
							"                }\r",
							"                \r",
							"                \r",
							"            break\r",
							"        }\r",
							"    })\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c3e545db-52fa-499f-aee6-e3c15c7bd380",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0e8e63d2-9803-42f2-84df-c7ab2a657265",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://testingqa-office.nexcloud.id/testingqa/farmindo/poincoming?preIncomingId={{preIncomingId}}",
					"protocol": "https",
					"host": [
						"testingqa-office",
						"nexcloud",
						"id"
					],
					"path": [
						"testingqa",
						"farmindo",
						"poincoming"
					],
					"query": [
						{
							"key": "preIncomingId",
							"value": "{{preIncomingId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PO Incoming by Seller",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d990fe9-626f-431a-ac52-fac81e07b67e",
						"exec": [
							"const customer = JSON.parse(pm.environment.get(\"LIST_CUSTOMER\"))\r",
							"const principal = JSON.parse(pm.environment.get(\"LIST_PRINCIPAL\"))\r",
							"const status = JSON.parse(pm.environment.get(\"LIST_STATUS\"))\r",
							"const messages = JSON.parse(pm.environment.get(\"LIST_MESSAGES\"))\r",
							"let arrayDataPoIncoming = JSON.parse(pm.environment.get(\"arrayObjDataPOIncoming\"))\r",
							"let indexNoPO = pm.environment.get(\"indexAwalNoPO\")\r",
							"let responsesBody = pm.response.json()\r",
							"let responsePoIncomingSeller = {}\r",
							"\r",
							"Object.keys(responsesBody[0]).forEach(function(key){\r",
							"    responsePoIncomingSeller[key] = responsesBody[0][key];\r",
							"})\r",
							"\r",
							"pm.environment.set(\"responseObjPOIncomingSellers\",JSON.stringify(responsePoIncomingSeller))\r",
							"\r",
							"pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"\r",
							"    pm.test(\"Status PO Incoming - Farmindo Web pada noPO \"+ responsePoIncomingSeller.poNumber + \" \" + responsePoIncomingSeller.status +\"!\",function(){\r",
							"        \r",
							"        if(responsePoIncomingSeller.status === status.Success){\r",
							"            pm.expect(responsePoIncomingSeller.status).to.eql(status.Success)\r",
							"        }\r",
							"\r",
							"        pm.test(\"id Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"poNumber Terisi \" + responsePoIncomingSeller.poNumber, function(){\r",
							"            pm.expect(responsePoIncomingSeller.poNumber).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"NOPO PO Incoming Farmindo Web \" + responsePoIncomingSeller.poNumber + \", dengan NOPO PO Incoming Farmindo PO \" + arrayDataPoIncoming[indexNoPO].noPO + \" Sesuai\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.poNumber).to.eql(arrayDataPoIncoming[indexNoPO].noPO)\r",
							"        })\r",
							"\r",
							"        pm.test(\"transactionDate Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.transactionDate).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"deliveryDate Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.deliveryDate).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"expirateDate Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.expirateDate).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerId Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.customerId).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerCode Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.customerCode).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerName Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.customerName).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"Customer \" + responsePoIncomingSeller.customerName + \" ada di LIST_CUSTOMER\", function(){\r",
							"            pm.expect(Object.values(customer).includes(responsePoIncomingSeller.customerName)).to.be.true\r",
							"        })\r",
							"\r",
							"        pm.test(\"Customer PO Incoming Farmindo Web \" + responsePoIncomingSeller.customerName + \", dengan Customer PO Incoming Farmindo PO \" + arrayDataPoIncoming[indexNoPO].customerCode + \" Sesuai\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.customerName).to.eql(arrayDataPoIncoming[indexNoPO].customerCode)\r",
							"        })\r",
							"\r",
							"        pm.test(\"principalId Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.principalId).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"principalCode Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.principalCode).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"principalName Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.principalName).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"Principal \" + responsePoIncomingSeller.principalName + \" ada di LIST_PRINCIPAL\", function(){\r",
							"            pm.expect(Object.values(principal).includes(responsePoIncomingSeller.principalName)).to.be.true\r",
							"        })\r",
							"\r",
							"        pm.test(\"Principal PO Incoming Farmindo Web \" + responsePoIncomingSeller.principalName + \", dengan Principal PO Incoming Farmindo PO \" + arrayDataPoIncoming[indexNoPO].principalCode + \" Sesuai\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.principalName).to.eql(arrayDataPoIncoming[indexNoPO].principalCode)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerStoreMappingId Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.customerStoreMappingId).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"storeId Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.storeId).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"storeCode Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.storeCode).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"storeName Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.storeName).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"farmindoStore Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.farmindoStore).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"supplierCode Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.supplierCode).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"principalStoreId Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.principalStoreId).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"distributorId Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.distributorId).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"distributorCode Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.distributorCode).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"distributorName Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.distributorName).not.null\r",
							"        })\r",
							"\r",
							"        \r",
							"        if(responsePoIncomingSeller.principalName === principal.Danone){\r",
							"            pm.test(\"warehouseId Terisi\",function(){\r",
							"                pm.expect(responsePoIncomingSeller.warehouseId).not.null\r",
							"            })\r",
							"\r",
							"            pm.test(\"warehouseCode Terisi\",function(){\r",
							"                pm.expect(responsePoIncomingSeller.warehouseCode).not.null\r",
							"            })\r",
							"\r",
							"            pm.test(\"warehouseName Terisi\",function(){\r",
							"                pm.expect(responsePoIncomingSeller.warehouseName).not.null\r",
							"            })\r",
							"        }\r",
							"        \r",
							"        pm.test(\"fileNameIn Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.fileNameIn).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"fileNameIn PO Incoming - Farmindo Web sudah sesuai dengan file poFileName PO Incoming - Farmindo PO\",function(){\r",
							"\r",
							"            if(responsePoIncomingSeller.customerName === customer.Le){\r",
							"                pm.expect(responsePoIncomingSeller.fileNameIn).to.eql(`${responsePoIncomingSeller.poNumber}.zip`)\r",
							"            } else {\r",
							"                pm.expect(responsePoIncomingSeller.fileNameIn).to.eql(arrayDataPoIncoming[indexNoPO].poFileName)\r",
							"            }\r",
							"        })\r",
							"\r",
							"        pm.test(\"fileIn Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.fileIn).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"fileNameOut(FLATFILE) Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.fileNameOut).not.null\r",
							"        })\r",
							"\r",
							"        UtilFunctions.checkFlatFileName(responsePoIncomingSeller.principalName,responsePoIncomingSeller.customerName,responsePoIncomingSeller.fileNameOut,responsePoIncomingSeller.poNumber, responsePoIncomingSeller.farmindoStore, responsePoIncomingSeller.distributorName,responsePoIncomingSeller.principalStoreId, responsePoIncomingSeller.createdDate, responsePoIncomingSeller.storeName)\r",
							"        \r",
							"        \r",
							"        pm.test(\"fileOut(FLATFILE) Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.fileOut).not.null\r",
							"        })\r",
							"\r",
							"\r",
							"        pm.test(\"flag Terisi \" + responsePoIncomingSeller.flag,function(){\r",
							"            switch(arrayDataPoIncoming[indexNoPO].status){\r",
							"                case status.Success:\r",
							"                    pm.expect(responsePoIncomingSeller.flag).to.eql(messages.Deliveryflatfile)\r",
							"                break\r",
							"                case status.Success_with_Unmapped:\r",
							"                    pm.expect(responsePoIncomingSeller.flag).to.eql(messages.Deliveryflatfile)\r",
							"                break\r",
							"                case status.Success_without_send_flatfile:\r",
							"                    pm.expect(responsePoIncomingSeller.flag).to.eql(messages.Faileddeliveryflatfile)\r",
							"                break\r",
							"            }\r",
							"        })\r",
							"\r",
							"        pm.test(\"Status \" + responsePoIncomingSeller.status + \" ada di LIST_STATUS\", function(){    \r",
							"            pm.expect(Object.values(status).includes(responsePoIncomingSeller.status)).to.be.true\r",
							"        })\r",
							"\r",
							"        pm.test(\"grossAmount Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.grossAmount).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"netAmount Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.netAmount).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"vatAmount Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.vatAmount).not.null\r",
							"        })\r",
							"\r",
							"        //Check TOP: top hanya pengaruh di PDF dan flatfile\r",
							"        // UtilFunctions.checkTop(responsePoIncomingSeller.principalName,responsePoIncomingSeller.customerName,responsePoIncomingSeller.top)\r",
							"\r",
							"        pm.test(\"dppAmount Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.dppAmount).not.null\r",
							"        })\r",
							"        \r",
							"        if(responsePoIncomingSeller.customerName === customer.Acephilipines || responsePoIncomingSeller.customerName === customer.Le || responsePoIncomingSeller.customerName === customer.Waltermart){\r",
							"            pm.test(\"taxValue Terisi 0\",function(){\r",
							"                pm.expect(responsePoIncomingSeller.taxValue).to.eql(0)\r",
							"            })\r",
							"        }else{\r",
							"            pm.test(\"taxValue Terisi 11%\",function(){\r",
							"                pm.expect(responsePoIncomingSeller.taxValue).to.eql(1.11)\r",
							"            })\r",
							"        }\r",
							"        \r",
							"\r",
							"        pm.test(\"discountValue Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.discountValue).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"discountAmount Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.discountValue).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"isProductMapping Terisi\",function(){\r",
							"            pm.expect(responsePoIncomingSeller.isProductMapping).not.null\r",
							"        })\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.environment.set(\"poIncomingId\",responsePoIncomingSeller?.id)\r",
							"pm.environment.set(\"storeMappingId\",responsePoIncomingSeller?.customerStoreMappingId)\r",
							"pm.environment.set(\"isCollectInfo\",false)\r",
							"console.log(\"Run PO Incoming Seller indexNoPO ke \" + indexNoPO + \" dengan NoPO \" + responsePoIncomingSeller.poNumber )\r",
							"postman.setNextRequest(\"Get Customer Store Mapping\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "696352d0-027b-4251-bbed-e72f3f5e8bd6",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "33c51bd9-4eb9-42bb-9bff-fa1b330b49ee",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://testingqa-office.nexcloud.id/testingqa/farmindo/poincomingbyseller?poNumber={{poNumber}}&sellerName={{sellerName}}",
					"protocol": "https",
					"host": [
						"testingqa-office",
						"nexcloud",
						"id"
					],
					"path": [
						"testingqa",
						"farmindo",
						"poincomingbyseller"
					],
					"query": [
						{
							"key": "poNumber",
							"value": "{{poNumber}}"
						},
						{
							"key": "sellerName",
							"value": "{{sellerName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Customer Store Mapping",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43e5c7dc-338b-412d-b14a-bc74d7f0c8e6",
						"exec": [
							"const customer = JSON.parse(pm.environment.get(\"LIST_CUSTOMER\"))\r",
							"const principal = JSON.parse(pm.environment.get(\"LIST_PRINCIPAL\"))\r",
							"const status = JSON.parse(pm.environment.get(\"LIST_STATUS\"))\r",
							"let responsePOIncomingSellers = JSON.parse(pm.environment.get(\"responseObjPOIncomingSellers\"))\r",
							"let indexNoPO = pm.environment.get(\"indexAwalNoPO\")\r",
							"let responsesBody = pm.response.json()\r",
							"let responseCustomerStoreMapping = {}\r",
							"\r",
							"if(responsesBody.message !== 'Data Not Found'){\r",
							"\r",
							"    Object.keys(responsesBody[0]).forEach(function(key){\r",
							"        responseCustomerStoreMapping[key] = responsesBody[0][key];\r",
							"    })\r",
							"    pm.environment.set(\"responseCustomerStoreMapping\",JSON.stringify(responseCustomerStoreMapping))\r",
							"\r",
							"    pm.test(\"Status Code Menghasilkan 200\", function(){\r",
							"        pm.expect(pm.response.code).to.eql(200)\r",
							"        \r",
							"        pm.test(\"Customer Store Mapping Active!\",function(){\r",
							"            pm.expect(responseCustomerStoreMapping.status).to.eql(status.Active)\r",
							"\r",
							"            pm.test(\"NoPO \" + responsePOIncomingSellers.poNumber + \", dengan customerStoreMappingId \" + responseCustomerStoreMapping.id + \", sesuai dengan id Customer Store Mapping \"  + responsePOIncomingSellers.customerStoreMappingId,function(){\r",
							"\r",
							"                pm.expect(responseCustomerStoreMapping.id).to.eql(responsePOIncomingSellers.customerStoreMappingId)\r",
							"                \r",
							"                pm.test(\"id Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.id).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"farmindoStore Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.farmindoStore).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"farmindoStore Customer Store Mapping \" + responseCustomerStoreMapping.farmindoStore + \", dengan farmindoStore PO Incoming Farmindo Web \" + responsePOIncomingSellers.farmindoStore + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.farmindoStore).to.eql(responsePOIncomingSellers.farmindoStore)\r",
							"                })\r",
							"\r",
							"                pm.test(\"supplierCode Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.supplierCode).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"supplierCode Customer Store Mapping \" + responseCustomerStoreMapping.supplierCode + \", dengan supplierCode PO Incoming Farmindo Web \" + responsePOIncomingSellers.supplierCode + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.supplierCode).to.eql(responsePOIncomingSellers.supplierCode)\r",
							"                })\r",
							"\r",
							"                pm.test(\"principalId Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.principalId).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"principalId Customer Store Mapping \" + responseCustomerStoreMapping.principalId + \", dengan principalId PO Incoming Farmindo Web \" + responsePOIncomingSellers.principalId + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.principalId).to.eql(responsePOIncomingSellers.principalId)\r",
							"                })\r",
							"\r",
							"                pm.test(\"principalCode Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.principalCode).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"principalCode Customer Store Mapping \" + responseCustomerStoreMapping.principalCode + \", dengan principalCode PO Incoming Farmindo Web \" + responsePOIncomingSellers.principalCode + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.principalCode).to.eql(responsePOIncomingSellers.principalCode)\r",
							"                })\r",
							"\r",
							"                pm.test(\"principalAlias Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.principalAlias).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"PrincipalAlias \" + responseCustomerStoreMapping.principalAlias + \" ada di LIST_PRINCIPAL\", function(){\r",
							"                    pm.expect(Object.values(principal).includes(responseCustomerStoreMapping.principalAlias)).to.be.true\r",
							"                })\r",
							"\r",
							"                pm.test(\"principalAlias Customer Store Mapping \" + responseCustomerStoreMapping.principalAlias + \", dengan principalName PO Incoming Farmindo Web \" + responsePOIncomingSellers.principalName + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.principalAlias).to.eql(responsePOIncomingSellers.principalName)\r",
							"                })\r",
							"\r",
							"                pm.test(\"principalStoreId Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.principalStoreId).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"principalStoreId Customer Store Mapping \" + responseCustomerStoreMapping.principalStoreId + \", dengan principalStoreId PO Incoming Farmindo Web \" + responsePOIncomingSellers.principalStoreId + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.principalStoreId).to.eql(responsePOIncomingSellers.principalStoreId)\r",
							"                })\r",
							"\r",
							"                pm.test(\"customerId Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.customerId).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"customerId Customer Store Mapping \" + responseCustomerStoreMapping.customerId + \", dengan customerId PO Incoming Farmindo Web \" + responsePOIncomingSellers.customerId + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.customerId).to.eql(responsePOIncomingSellers.customerId)\r",
							"                })\r",
							"\r",
							"                pm.test(\"customerCode Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.customerCode).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"customerCode Customer Store Mapping \" + responseCustomerStoreMapping.customerCode + \", dengan customerCode PO Incoming Farmindo Web \" + responsePOIncomingSellers.customerCode + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.customerCode).to.eql(responsePOIncomingSellers.customerCode)\r",
							"                })\r",
							"\r",
							"                pm.test(\"customerAlias Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.customerAlias).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"CustomerAlias \" + responseCustomerStoreMapping.customerAlias + \" ada di LIST_CUSTOMER\", function(){\r",
							"                    pm.expect(Object.values(customer).includes(responseCustomerStoreMapping.customerAlias)).to.be.true\r",
							"                })\r",
							"\r",
							"                pm.test(\"customerAlias Customer Store Mapping \" + responseCustomerStoreMapping.customerCode + \", dengan customerName PO Incoming Farmindo Web \" + responsePOIncomingSellers.customerName + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.customerAlias).to.eql(responsePOIncomingSellers.customerName)\r",
							"                })\r",
							"\r",
							"                pm.test(\"storeId Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.storeId).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"storeId Customer Store Mapping \" + responseCustomerStoreMapping.storeId + \", dengan storeId PO Incoming Farmindo Web \" + responsePOIncomingSellers.storeId + \" Sesuai\",function(){\r",
							"                    pm.expect(String(responseCustomerStoreMapping.storeId)).to.eql(responsePOIncomingSellers.storeId)\r",
							"                })\r",
							"\r",
							"                pm.test(\"storeCode Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.storeCode).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"storeCode Customer Store Mapping \" + responseCustomerStoreMapping.storeCode + \", dengan storeId PO Incoming Farmindo Web \" + responsePOIncomingSellers.storeCode + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.storeCode).to.eql(responsePOIncomingSellers.storeCode)\r",
							"                })\r",
							"\r",
							"                pm.test(\"storeName Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.storeName).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"storeName Customer Store Mapping \" + responseCustomerStoreMapping.storeName + \", dengan storeId PO Incoming Farmindo Web \" + responsePOIncomingSellers.storeName + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.storeName).to.eql(responsePOIncomingSellers.storeName)\r",
							"                })\r",
							"\r",
							"                pm.test(\"distributorId Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.distributorId).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"distributorId Customer Store Mapping \" + responseCustomerStoreMapping.distributorId + \", dengan distributorId PO Incoming Farmindo Web \" + responsePOIncomingSellers.distributorId + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.distributorId).to.eql(responsePOIncomingSellers.distributorId)\r",
							"                })\r",
							"\r",
							"                pm.test(\"distributorCode Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.distributorCode).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"distributorCode Customer Store Mapping \" + responseCustomerStoreMapping.distributorCode + \", dengan distributorCode PO Incoming Farmindo Web \" + responsePOIncomingSellers.distributorCode + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.distributorCode).to.eql(responsePOIncomingSellers.distributorCode)\r",
							"                })\r",
							"\r",
							"                pm.test(\"distributorCode Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.distributorCode).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"distributorAlias Customer Store Mapping \" + responseCustomerStoreMapping.distributorAlias + \", dengan distributorName PO Incoming Farmindo Web \" + responsePOIncomingSellers.distributorName + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.distributorAlias).to.eql(responsePOIncomingSellers.distributorName)\r",
							"                })\r",
							"\r",
							"                pm.test(\"isBKL Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.isBKL).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"isProductMapping Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.isProductMapping).not.null\r",
							"                })\r",
							"\r",
							"                pm.test(\"isProductMapping Customer Store Mapping \" + responseCustomerStoreMapping.isProductMapping + \", dengan isProductMapping PO Incoming Farmindo Web \" + responsePOIncomingSellers.isProductMapping + \" Sesuai\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.isProductMapping).to.eql(responsePOIncomingSellers.isProductMapping)\r",
							"                })\r",
							"\r",
							"                pm.test(\"status Terisi\",function(){\r",
							"                    pm.expect(responseCustomerStoreMapping.status).not.null\r",
							"                })\r",
							"            })\r",
							"        })\r",
							"    })\r",
							"\r",
							"    console.log(\"Run Customer Store Mapping id \" + responsePOIncomingSellers.id + \" dengan NoPO \" + responsePOIncomingSellers.poNumber + \" indexNoPO ke \" + indexNoPO)\r",
							"    postman.setNextRequest(\"Get PO Incoming Detail by Seller\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b81bbd85-e000-4a19-8d4b-a19964ef7228",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e885d5ad-74ee-4ac6-bc7b-afb413323c1e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://testingqa-office.nexcloud.id/testingqa/farmindo/customerstoremapping?storeMappingId={{storeMappingId}}",
					"protocol": "https",
					"host": [
						"testingqa-office",
						"nexcloud",
						"id"
					],
					"path": [
						"testingqa",
						"farmindo",
						"customerstoremapping"
					],
					"query": [
						{
							"key": "storeMappingId",
							"value": "{{storeMappingId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PO Incoming Detail by Seller",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9c9ab9b-84b7-4c96-bda2-1302b69b7546",
						"exec": [
							"const status = JSON.parse(pm.environment.get(\"LIST_STATUS\"))\r",
							"const rules = JSON.parse(pm.environment.get(\"LIST_RULES\"))\r",
							"let isCollectInfo = pm.environment.get(\"isCollectInfo\")\r",
							"let uomProductMapping = pm.environment.get(\"uomProductMapping\")\r",
							"let conversionProductMapping = pm.environment.get(\"conversionProductMapping\")\r",
							"let uomProductPrincipal = pm.environment.get(\"uomProductPrincipal\")\r",
							"let conversionProductPrincipal = pm.environment.get(\"conversionProductPrincipal\")\r",
							"let uom_Order = pm.environment.get(\"UOM_ORDER\")\r",
							"let arrayDataPoIncoming = JSON.parse(pm.environment.get(\"arrayObjDataPOIncoming\"))\r",
							"let indexNoPO = pm.environment.get(\"indexAwalNoPO\")\r",
							"let responsePOIncomingSellers = JSON.parse(pm.environment.get(\"responseObjPOIncomingSellers\"))\r",
							"let responseCustomerStoreMapping = JSON.parse(pm.environment.get(\"responseCustomerStoreMapping\"))\r",
							"let responsesBody = pm.response.json();\r",
							"let arrayDataPoIncomingDetail = [];\r",
							"let indexDetail = pm.environment.get(\"indexAwalDetail\")\r",
							"let totalLineGrossAmount = null\r",
							"let totalLineDppAmount = null\r",
							"let totalLineVatAmount = null\r",
							"let totalLineNetAmount = null\r",
							"let priceTolerance = pm.environment.get(\"priceTolerance\")\r",
							"//const priceTolerance = 10\r",
							"\r",
							"if(arrayDataPoIncomingDetail.length === 0){\r",
							"    responsesBody.forEach(function(obj){\r",
							"        arrayDataPoIncomingDetail.push(obj);\r",
							"        if(obj.flag == \"SUCCESS\"){\r",
							"            totalLineGrossAmount+=obj.lineGrossAmount\r",
							"            totalLineDppAmount+=obj.lineDppAmount\r",
							"            totalLineVatAmount+=obj.lineVatAmount\r",
							"            totalLineNetAmount+=obj.lineNetAmount\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"console.log(`totalLineGrossAmount ${totalLineGrossAmount}`)\r",
							"console.log(`totalLineDppAmount ${totalLineDppAmount}`)\r",
							"console.log(`totalLineVatAmount ${totalLineVatAmount}`)\r",
							"console.log(`totalLineNetAmount ${totalLineNetAmount}`)\r",
							"\r",
							"var filteredData = responsesBody.filter(obj => obj.remarks === 'NOT_MAPPING' && obj.flag === 'FAILED');\r",
							"var jumlahRemarksNotMapping = filteredData.length;\r",
							"\r",
							"//pm.environment.set(\"arrayObjDataPOIncomingDetail\", JSON.stringify(arrayDataPoIncomingDetail))\r",
							"pm.environment.set(\"arrayObjDataPOIncomingDetail\", JSON.stringify(arrayDataPoIncomingDetail.sort(function(a,b){return a.id - b.id})))\r",
							"\r",
							"//console.log(arrayDataPoIncomingDetail[indexDetail].id)\r",
							"\r",
							"pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"\r",
							"    //flag isCollectInfo, untuk mendapatkan data pendukung untuk mengecek harga, seperti conversion dan uom\r",
							"    if(isCollectInfo === false){\r",
							"\r",
							"        console.log(\"IsCollectInfo False\")\r",
							"\r",
							"        /* GENERAL CHECK */ \r",
							"\r",
							"        pm.test(\"id Terisi \" + arrayDataPoIncomingDetail[indexDetail].id,function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"poIncomingId Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].poIncomingId).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"poIncomingId PO Incoming Detail Farmindo Web \" + arrayDataPoIncomingDetail[indexDetail].       poIncomingId + \", dengan id PO Incoming Farmindo Web \" + responsePOIncomingSellers.id + \"   Sesuai\", function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].poIncomingId).to.eql(responsePOIncomingSellers.id)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerProductFromPO Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].customerProductFromPO).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"qty1 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].qty1).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"qty2 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].qty2).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"qty3 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].qty3).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"qty4 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].qty4).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"priceUOM1 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].priceUOM1).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"priceUOM2 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].priceUOM2).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"priceUOM3 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].priceUOM3).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"priceUOM4 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].priceUOM4).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineDiscount1 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineDiscount1).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineDiscount2 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineDiscount2).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineDiscount3 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineDiscount3).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineDiscount4 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineDiscount4).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineDiscount5 Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineDiscount5).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineGrossAmount Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineGrossAmount).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineNetAmount Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineNetAmount).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"linePricePerItem Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].linePricePerItem).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineVatAmount Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineVatAmount).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineDppAmount Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineDppAmount).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"lineTaxValue Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].lineTaxValue).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"qtyOrder Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].qtyOrder).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"additionalData Terisi\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].additionalData).not.null\r",
							"        })\r",
							"\r",
							"        /* SPECIFY CHECK */ \r",
							"\r",
							"        switch(arrayDataPoIncoming[indexNoPO].status){\r",
							"            case status.Success_without_send_flatfile:\r",
							"            case status.Success:\r",
							"\r",
							"                if(jumlahRemarksNotMapping === 0){\r",
							"                    if(responseCustomerStoreMapping.isProductMapping === rules.Prodmap_Y){\r",
							"                        console.log(\"SUCCESS + IS PRODUCT MAPPING Y\")\r",
							"\r",
							"                        pm.test(\"flag Terisi SUCCESS\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].flag).to.eql(status.Success)\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"customerProductFromPO Sesuai dengan productCode\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].customerProductFromPO).to.eql(arrayDataPoIncomingDetail[indexDetail].productCode)\r",
							"                        })\r",
							"                        \r",
							"                        pm.test(\"productMappingId Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingId).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productCustomerId Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productCustomerId).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productCode Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productCode).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productName Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productName).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productPrincipalId Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalId).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productPrincipalCode Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalCode).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productPrincipalName Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalName).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productMappingRules Terisi \" + arrayDataPoIncomingDetail[indexDetail].productMappingRules,function(){\r",
							"                            switch(arrayDataPoIncomingDetail[indexDetail].productMappingRules){\r",
							"                                case rules.Mapping:\r",
							"                                    pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingRules).to.eql(rules.Mapping)\r",
							"                                break\r",
							"                                case rules.Mapping_parent:\r",
							"                                    pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingRules).to.eql(rules.Mapping_parent)\r",
							"                                break\r",
							"                            }\r",
							"                        })\r",
							"                        \r",
							"                        pm.test(\"remarks Terisi MAPPING\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].remarks).to.eql(rules.Mapping)\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"uom1 Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uom1).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"uom2 Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uom2).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"uom3 Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uom3).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"uom4 Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uom4).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"uomOrder Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uomOrder).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.environment.set(\"productMappingId\",arrayDataPoIncomingDetail[indexDetail].productMappingId)\r",
							"                        pm.environment.set(\"productId\",arrayDataPoIncomingDetail[indexDetail].productCustomerId)\r",
							"                        pm.environment.set(\"productCode\",arrayDataPoIncomingDetail[indexDetail].productCode)\r",
							"                        pm.environment.set(\"productPrincipalId\",arrayDataPoIncomingDetail[indexDetail].productPrincipalId)\r",
							"                        pm.environment.set(\"productPrincipalCode\",arrayDataPoIncomingDetail[indexDetail].productPrincipalCode)\r",
							"                            \r",
							"                        postman.setNextRequest(\"Get Product Customer\")\r",
							"                        return\r",
							"\r",
							"                    } else if (responseCustomerStoreMapping.isProductMapping === rules.Prodmap_N){\r",
							"                        console.log(\"SUCCESS + IS PRODUCT MAPPING N\")\r",
							"                        \r",
							"                        pm.test(\"productMappingId Terisi 0\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingId).to.eql(0)\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productCustomerId Terisi 0\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productCustomerId).to.eql(0)\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productCode Tidak Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productCode).is.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productName Tidak Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productName).is.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productPrincipalId Terisi 0\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalId).to.eql(0)\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productPrincipalCode Tidak Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalCode).is.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productPrincipalName Tidak Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalName).is.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"productMappingRules Tidak Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingRules).to.eql('')\r",
							"                        })\r",
							"                        \r",
							"                        pm.test(\"remarks Terisi NOT_MAPPING\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].remarks).to.eql(rules.Notmapping)\r",
							"                        })\r",
							"                        \r",
							"                        pm.test(\"uom1 Terisi dari PO\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uom1).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"uom2 Terisi dari PO\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uom2).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"uom3 Terisi dari PO\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uom3).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"uom4 Terisi dari PO\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uom4).not.null\r",
							"                        })\r",
							"\r",
							"                        pm.test(\"uomOrder Terisi\",function(){\r",
							"                            pm.expect(arrayDataPoIncomingDetail[indexDetail].uomOrder).not.null\r",
							"                        })\r",
							"                        \r",
							"                        // pengecekan Qty dan Harga berdasarkan data di detail dan disamakan dengan po incoming\r",
							"                        \r",
							"                        // Check Line Gross\r",
							"                        UtilFunctions.checkLineGrossAmount(arrayDataPoIncomingDetail[indexDetail].qty1, arrayDataPoIncomingDetail[indexDetail].qty2 ,arrayDataPoIncomingDetail[indexDetail].priceUOM1, arrayDataPoIncomingDetail[indexDetail].priceUOM2, arrayDataPoIncomingDetail[indexDetail].lineGrossAmount, priceTolerance, responsePOIncomingSellers.customerName, arrayDataPoIncomingDetail[indexDetail].lineDiscount1, arrayDataPoIncomingDetail[indexDetail].totalLineDiscount)\r",
							"                        \r",
							"                        // Check Line DPP\r",
							"                        UtilFunctions.checkLineDppAmount(responsePOIncomingSellers.principalName,responsePOIncomingSellers.customerName, arrayDataPoIncomingDetail[indexDetail].lineDiscount1, arrayDataPoIncomingDetail[indexDetail].lineGrossAmount, arrayDataPoIncomingDetail[indexDetail].lineDppAmount,priceTolerance, arrayDataPoIncomingDetail[indexDetail].totalLineDiscount)\r",
							"                            \r",
							"                        // Check Line VAT\r",
							"                        UtilFunctions.checkLineVatAmount(arrayDataPoIncomingDetail[indexDetail].lineDppAmount, arrayDataPoIncomingDetail[indexDetail].lineVatAmount, responsePOIncomingSellers.customerName, arrayDataPoIncomingDetail[indexDetail].lineNetAmount, priceTolerance)\r",
							"\r",
							"                        // Check Line NET\r",
							"                        UtilFunctions.checkLineNetAmount(arrayDataPoIncomingDetail[indexDetail].lineDppAmount, arrayDataPoIncomingDetail[indexDetail].lineVatAmount, arrayDataPoIncomingDetail[indexDetail].lineNetAmount, priceTolerance)\r",
							"                        \r",
							"                        \r",
							"                        // Check Harga Total dengan Po Incoming Seller\r",
							"                        UtilFunctions.checkHargaTotal(responsePOIncomingSellers.grossAmount, totalLineGrossAmount, responsePOIncomingSellers.dppAmount, responsePOIncomingSellers.discountValue, totalLineDppAmount, responsePOIncomingSellers.vatAmount, totalLineVatAmount, responsePOIncomingSellers.netAmount, totalLineNetAmount, priceTolerance, responsePOIncomingSellers.customerName)\r",
							"                        \r",
							"                        console.log(\"Run PO Incoming Detail dengan indexDetail ke \" + indexDetail)\r",
							"                    \r",
							"                        pm.environment.set(\"productMappingId\",\"456\")\r",
							"                        pm.environment.set(\"productId\",\"456\")\r",
							"                        pm.environment.set(\"productCode\",\"test456\")\r",
							"                        pm.environment.set(\"productPrincipalId\",\"456\")\r",
							"                        pm.environment.set(\"productPrincipalCode\",\"test456\")\r",
							"                        console.log(\"pm set dummy\")\r",
							"\r",
							"                        //loop\r",
							"                        if (indexDetail < arrayDataPoIncomingDetail.length){\r",
							"                            \r",
							"                            pm.environment.set(\"indexAwalDetail\",Number(indexDetail + 1))\r",
							"                            console.log(indexDetail)\r",
							"\r",
							"                            if(indexDetail === arrayDataPoIncomingDetail.length - 1) return;\r",
							"                            postman.setNextRequest(\"Get PO Incoming Detail by Seller\")\r",
							"\r",
							"                        }else {\r",
							"                            pm.environment.set(\"indexAwalDetail\",Number(0))\r",
							"                            \r",
							"                            console.log(\"TEEEEEEEEEST3\")\r",
							"                            postman.setNextRequest(\"Get Product Customer\")\r",
							"                            \r",
							"                        }\r",
							"                    }\r",
							"                }\r",
							"            break\r",
							"            \r",
							"            case status.Success_without_send_flatfile:\r",
							"            case status.Success_with_unmapped:\r",
							"\r",
							"            console.log(\"sukses without send flatfile tapi unmapped\")\r",
							"\r",
							"                if (jumlahRemarksNotMapping != 0){\r",
							"                    pm.test(\"IS PRODUCT MAPPING Y, Benar!\",function(){\r",
							"                        pm.expect(responseCustomerStoreMapping.isProductMapping).to.eql(rules.Prodmap_Y)\r",
							"                    \r",
							"                        if (responseCustomerStoreMapping.pmHandling === rules.Pmhandling_I){\r",
							"                            console.log(\"SUCCESS_WITH_UNMAPPED pmHandling I\")\r",
							"                            pm.test(\"PM Handling I, Benar beberapa Detail Remarks NOT_MAPPING dan Flag FAILED\",function(){\r",
							"                                pm.expect(jumlahRemarksNotMapping).to.be.greaterThan(0);\r",
							"                            })\r",
							"                        }else if (responseCustomerStoreMapping.pmHandling === rules.Pmhandling_A){\r",
							"                            console.log(\"SUCCESS_WITH_UNMAPPED pmHandling A\")\r",
							"                            pm.test(\"PM Handling A, Benar semua Detail Remarks NOT_MAPPING dan Flag FAILED\",function(){\r",
							"                                responsesBody.forEach(function(obj){\r",
							"                                    pm.expect(obj.remarks).to.eql(rules.Notmapping)\r",
							"                                    pm.expect(obj.flag).to.eql(status.Failed)\r",
							"                                });\r",
							"                            })\r",
							"                        }\r",
							"                        \r",
							"                        if(arrayDataPoIncomingDetail[indexDetail].remarks === rules.Notmapping){\r",
							"                            console.log(\"SUCCESS_WITH_UNMAPPED remarks NOT_MAPPING\")\r",
							"                            pm.test(\"productMappingId Terisi 0\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingId).to.eql(0)\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productCustomerId Terisi 0\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productCustomerId).to.eql(0)\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productCode Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productCode).is.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productName Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productName).is.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productPrincipalId Terisi 0\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalId).to.eql(0)\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productPrincipalCode Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalCode).is.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productPrincipalName Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalName).is.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productMappingRules Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingRules).to.eql('')\r",
							"                            })\r",
							"                            \r",
							"                            pm.test(\"remarks Terisi NOT_MAPPING\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].remarks).to.eql(rules.Notmapping)\r",
							"                            })\r",
							"                            \r",
							"                            pm.test(\"uom1 Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uom1).to.eql('')\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"uom2 Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uom2).to.eql('')\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"uom3 Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uom3).to.eql('')\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"uom4 Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uom4).to.eql('')\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"uomOrder Tidak Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uomOrder).not.to.be.oneOf(['UOM_1','UOM_2','UOM_3','UOM_4'])\r",
							"                            })\r",
							"\r",
							"                            // Check Line Gross\r",
							"                            UtilFunctions.checkLineGrossAmount(arrayDataPoIncomingDetail[indexDetail].qty1, arrayDataPoIncomingDetail[indexDetail].qty2 ,arrayDataPoIncomingDetail[indexDetail].priceUOM1, arrayDataPoIncomingDetail[indexDetail].priceUOM2, arrayDataPoIncomingDetail[indexDetail].lineGrossAmount, priceTolerance, responsePOIncomingSellers.customerName, arrayDataPoIncomingDetail[indexDetail].lineDiscount1, arrayDataPoIncomingDetail[indexDetail].totalLineDiscount)\r",
							"                        \r",
							"                            // Check Line DPP\r",
							"                            UtilFunctions.checkLineDppAmount(responsePOIncomingSellers.principalName,responsePOIncomingSellers.customerName, arrayDataPoIncomingDetail[indexDetail].lineDiscount1, arrayDataPoIncomingDetail[indexDetail].lineGrossAmount, arrayDataPoIncomingDetail[indexDetail].lineDppAmount,priceTolerance, arrayDataPoIncomingDetail[indexDetail].totalLineDiscount)\r",
							"                            \r",
							"                            // Check Line VAT\r",
							"                            UtilFunctions.checkLineVatAmount(arrayDataPoIncomingDetail[indexDetail].lineDppAmount, arrayDataPoIncomingDetail[indexDetail].lineVatAmount, responsePOIncomingSellers.customerName, arrayDataPoIncomingDetail[indexDetail].lineNetAmount, priceTolerance)\r",
							"\r",
							"                            // Check Line NET\r",
							"                            UtilFunctions.checkLineNetAmount(arrayDataPoIncomingDetail[indexDetail].lineDppAmount, arrayDataPoIncomingDetail[indexDetail].lineVatAmount, arrayDataPoIncomingDetail[indexDetail].lineNetAmount, priceTolerance)\r",
							"\r",
							"                            // Check Harga Total dengan Po Incoming Seller\r",
							"                            UtilFunctions.checkHargaTotal(responsePOIncomingSellers.grossAmount, totalLineGrossAmount, responsePOIncomingSellers.dppAmount,responsePOIncomingSellers.discountValue, totalLineDppAmount, responsePOIncomingSellers.vatAmount, totalLineVatAmount, responsePOIncomingSellers.netAmount, totalLineNetAmount, priceTolerance, responsePOIncomingSellers.customerName)\r",
							"                            \r",
							"                            console.log(\"Run PO Incoming Detail dengan indexDetail ke \" + indexDetail)\r",
							"\r",
							"                            //loop\r",
							"                            if (indexDetail < arrayDataPoIncomingDetail.length-1){\r",
							"                                \r",
							"                                pm.environment.set(\"indexAwalDetail\",Number(indexDetail + 1))\r",
							"\r",
							"                                //if(indexDetail === arrayDataPoIncomingDetail.length - 1) return;\r",
							"                                postman.setNextRequest(\"Get PO Incoming Detail by Seller\")\r",
							"\r",
							"                            }else {\r",
							"                                console.log(\"pm set dummy3\")\r",
							"                                pm.environment.set(\"indexAwalDetail\",Number(0))\r",
							"\r",
							"                                pm.environment.set(\"productMappingId\",\"456\")\r",
							"                                pm.environment.set(\"productId\",\"456\")\r",
							"                                pm.environment.set(\"productCode\",\"test456\")\r",
							"                                pm.environment.set(\"productPrincipalId\",\"456\")\r",
							"                                pm.environment.set(\"productPrincipalCode\",\"test456\")\r",
							"\r",
							"                                postman.setNextRequest(\"Get Product Customer\")\r",
							"                                return\r",
							"                            }\r",
							"\r",
							"                        } else if (arrayDataPoIncomingDetail[indexDetail].remarks === rules.Mapping){\r",
							"                            console.log(\"SUCCESS_WITH_UNMAPPED remarks MAPPING\")                \r",
							"                            pm.test(\"productMappingId Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingId).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productCustomerId Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productCustomerId).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productCode Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productCode).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productName Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productName).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productPrincipalId Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalId).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productPrincipalCode Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalCode).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productPrincipalName Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].productPrincipalName).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"productMappingRules Terisi \" + arrayDataPoIncomingDetail[indexDetail].productMappingRules,function(){\r",
							"                                switch(arrayDataPoIncomingDetail[indexDetail].productMappingRules){\r",
							"                                    case rules.Mapping:\r",
							"                                        pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingRules).to.eql(rules.Mapping)\r",
							"                                    break\r",
							"                                    case rules.Mapping_parent:\r",
							"                                        pm.expect(arrayDataPoIncomingDetail[indexDetail].productMappingRules).to.eql(rules.Mapping_parent)\r",
							"                                    break\r",
							"                                }\r",
							"                            })\r",
							"                            \r",
							"                            pm.test(\"remarks Terisi MAPPING\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].remarks).to.eql(rules.Mapping)\r",
							"                            })\r",
							"                            \r",
							"                            pm.test(\"uom1 Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uom1).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"uom2 Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uom2).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"uom3 Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uom3).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"uom4 Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uom4).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.test(\"uomOrder Terisi\",function(){\r",
							"                                pm.expect(arrayDataPoIncomingDetail[indexDetail].uomOrder).not.null\r",
							"                            })\r",
							"\r",
							"                            pm.environment.set(\"productMappingId\",arrayDataPoIncomingDetail[indexDetail].productMappingId)\r",
							"                            pm.environment.set(\"productId\",arrayDataPoIncomingDetail[indexDetail].productCustomerId)\r",
							"                            pm.environment.set(\"productCode\",arrayDataPoIncomingDetail[indexDetail].productCode)\r",
							"                            pm.environment.set(\"productPrincipalId\",arrayDataPoIncomingDetail[indexDetail].productPrincipalId)\r",
							"                            pm.environment.set(\"productPrincipalCode\",arrayDataPoIncomingDetail[indexDetail].productPrincipalCode)\r",
							"\r",
							"                            console.log(\"TEEEEEEEEEST\")\r",
							"                                \r",
							"                            postman.setNextRequest(\"Get Product Customer\")\r",
							"                            return\r",
							"\r",
							"                        }\r",
							"                    }) \r",
							"                } \r",
							"            break\r",
							"                 \r",
							"                 \r",
							"        }\r",
							"\r",
							"    } else {\r",
							"        \r",
							"        // untuk mengecek index sebelumnya karena disini nge hit po incoming detail kedua kali\r",
							"        if(indexDetail != 0){\r",
							"            pm.environment.set(\"indexAwalDetail\",Number(indexDetail - 1))\r",
							"        }\r",
							"\r",
							"        console.log(\"IsCollectInfo True\")\r",
							"\r",
							"        // Check uom_Order\r",
							"        pm.test(\"uomOrder sudah sesuai dengan pengecekan UOM\",function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].uomOrder).to.eql(uom_Order)\r",
							"\r",
							"        })\r",
							"\r",
							"        if(responsePOIncomingSellers.customerName === \"ALFAMART\" || \r",
							"            responsePOIncomingSellers.customerName === \"ALFAMIDI\" || \r",
							"            responsePOIncomingSellers.customerName === \"INDOMARET\" || \r",
							"            responsePOIncomingSellers.customerName === \"INDOGROSIR\" || \r",
							"            responsePOIncomingSellers.customerName === \"SUPERINDO\" || \r",
							"            responsePOIncomingSellers.customerName === \"TIPTOP\" || \r",
							"            responsePOIncomingSellers.customerName === \"NAGA\"){\r",
							"\r",
							"                UtilFunctions.checkQtyPriceuomConversionFromPO(\r",
							"                    arrayDataPoIncomingDetail[indexDetail].id, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].uom1, \r",
							"                    uomProductPrincipal, uomProductMapping, uom_Order, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].qtyOrder, \r",
							"                    conversionProductPrincipal, conversionProductMapping, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].qty1, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].qty2, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].qty3, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].qty4, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].linePricePerItem, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].priceUOM1, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].priceUOM2, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].priceUOM3, \r",
							"                    arrayDataPoIncomingDetail[indexDetail].priceUOM4, \r",
							"                    priceTolerance)\r",
							"        }else {\r",
							"\r",
							"            // Jika Conversion dan UOM ada di ProductMapping maka gunakan, jika tidak gunakan yang di ProductPrincipal\r",
							"            if(conversionProductMapping != null && uomProductMapping != null){\r",
							"                UtilFunctions.checkQtyPriceuomDariDataProductMapping(\r",
							"                        arrayDataPoIncomingDetail[indexDetail].id, arrayDataPoIncomingDetail[indexDetail].uom1,\r",
							"                        arrayDataPoIncomingDetail[indexDetail].uom2, arrayDataPoIncomingDetail[indexDetail].uom3, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].uom4, uomProductMapping, uom_Order, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].qtyOrder, conversionProductMapping, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].qty1, arrayDataPoIncomingDetail[indexDetail].qty2, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].qty3, arrayDataPoIncomingDetail[indexDetail].qty4, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].linePricePerItem, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].priceUOM1, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].priceUOM2, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].priceUOM3, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].priceUOM4,\r",
							"                        priceTolerance)\r",
							"            }else{\r",
							"                UtilFunctionscheckQtyPriceuomDariDataProductPrincipal(\r",
							"                        arrayDataPoIncomingDetail[indexDetail].id, arrayDataPoIncomingDetail[indexDetail].uom1,\r",
							"                        arrayDataPoIncomingDetail[indexDetail].uom2, arrayDataPoIncomingDetail[indexDetail].uom3, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].uom4, uomProductPrincipal, uom_Order, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].qtyOrder, conversionProductPrincipal, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].qty1, arrayDataPoIncomingDetail[indexDetail].qty2, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].qty3, arrayDataPoIncomingDetail[indexDetail].qty4, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].linePricePerItem, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].priceUOM1, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].priceUOM2, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].priceUOM3, \r",
							"                        arrayDataPoIncomingDetail[indexDetail].priceUOM4,\r",
							"                        priceTolerance)\r",
							"            }\r",
							"        }\r",
							"        // Check Line Gross\r",
							"        UtilFunctions.checkLineGrossAmount(arrayDataPoIncomingDetail[indexDetail].qty1, arrayDataPoIncomingDetail[indexDetail].qty2 ,arrayDataPoIncomingDetail[indexDetail].priceUOM1, arrayDataPoIncomingDetail[indexDetail].priceUOM2, arrayDataPoIncomingDetail[indexDetail].lineGrossAmount, priceTolerance, responsePOIncomingSellers.customerName, arrayDataPoIncomingDetail[indexDetail].lineDiscount1, arrayDataPoIncomingDetail[indexDetail].totalLineDiscount)\r",
							"        \r",
							"        // Check Line DPP\r",
							"        UtilFunctions.checkLineDppAmount(responsePOIncomingSellers.principalName,responsePOIncomingSellers.customerName, arrayDataPoIncomingDetail[indexDetail].lineDiscount1, arrayDataPoIncomingDetail[indexDetail].lineGrossAmount, arrayDataPoIncomingDetail[indexDetail].lineDppAmount,priceTolerance , arrayDataPoIncomingDetail[indexDetail].totalLineDiscount)\r",
							"                        \r",
							"        // Check Line VAT\r",
							"        UtilFunctions.checkLineVatAmount(arrayDataPoIncomingDetail[indexDetail].lineDppAmount, arrayDataPoIncomingDetail[indexDetail].lineVatAmount, responsePOIncomingSellers.customerName, arrayDataPoIncomingDetail[indexDetail].lineNetAmount, priceTolerance)\r",
							"\r",
							"        // Check Line NET\r",
							"        UtilFunctions.checkLineNetAmount(arrayDataPoIncomingDetail[indexDetail].lineDppAmount, arrayDataPoIncomingDetail[indexDetail].lineVatAmount, arrayDataPoIncomingDetail[indexDetail].lineNetAmount, priceTolerance)\r",
							"        \r",
							"        // Check Harga Total dengan Po Incoming Seller\r",
							"        UtilFunctions.checkHargaTotal(responsePOIncomingSellers.grossAmount, totalLineGrossAmount, responsePOIncomingSellers.dppAmount, responsePOIncomingSellers.discountValue, totalLineDppAmount, responsePOIncomingSellers.vatAmount, totalLineVatAmount, responsePOIncomingSellers.netAmount, totalLineNetAmount, priceTolerance, responsePOIncomingSellers.customerName)\r",
							"\r",
							"\r",
							"        \r",
							"        // console.log(\"Run PO Incoming Detail dengan indexDetail ke \" + indexDetail)\r",
							"        // pm.environment.set(\"indexAwalDetail\",Number(indexDetail + 1))\r",
							"        // pm.environment.set(\"isCollectInfo\",false)\r",
							"        // postman.setNextRequest(\"Get PO Incoming Detail by Seller\")\r",
							"        \r",
							"\r",
							"        // if(indexDetail === responsesBody.length-1){\r",
							"        //     pm.environment.set(\"productMappingId\",\"456\")\r",
							"        //     pm.environment.set(\"productId\",\"456\")\r",
							"        //     pm.environment.set(\"productCode\",\"test456\")\r",
							"        //     pm.environment.set(\"productPrincipalId\",\"456\")\r",
							"        //     pm.environment.set(\"productPrincipalCode\",\"test456\")\r",
							"        //     postman.setNextRequest(\"Get Product Customer\")\r",
							"        // } else {\r",
							"        //     postman.setNextRequest(\"Get PO Incoming Detail by Seller\")\r",
							"        // }\r",
							"\r",
							"        // pm.environment.set(\"indexAwalDetail\",Number(indexDetail + 1))\r",
							"        console.log(`INDEX AWAL = ${indexDetail}`)\r",
							"        console.log(`response length ${arrayDataPoIncomingDetail.length}`)\r",
							"        if(indexDetail === arrayDataPoIncomingDetail.length-1){\r",
							"                \r",
							"            console.log(`INDEX dalam if = ${indexDetail}`)\r",
							"            pm.environment.set(\"productMappingId\",\"456\")\r",
							"            pm.environment.set(\"productId\",\"456\")\r",
							"            pm.environment.set(\"productCode\",\"test456\")\r",
							"            pm.environment.set(\"productPrincipalId\",\"456\")\r",
							"            pm.environment.set(\"productPrincipalCode\",\"test456\")\r",
							"            console.log(\"pm set dummy\")\r",
							"            postman.setNextRequest(\"Get Product Customer\")\r",
							"        } else {\r",
							"            console.log(`INDEX dalam else = ${indexDetail}`)\r",
							"            console.log(\"Run PO Incoming Detail dengan indexDetail ke \" + indexDetail)\r",
							"            pm.environment.set(\"indexAwalDetail\",Number(indexDetail + 1))\r",
							"            pm.environment.set(\"isCollectInfo\",false)\r",
							"            postman.setNextRequest(\"Get PO Incoming Detail by Seller\")\r",
							"\r",
							"        }\r",
							"\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ef6066e2-e88b-4f5e-a061-327a42c36979",
						"exec": [
							"let indexDetail = pm.environment.get(\"indexAwalDetail\") ?? 0"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "275e82ff-5fe3-4f0c-8672-bc968787bc2c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://testingqa-office.nexcloud.id/testingqa/farmindo/poincomingdetailbyseller?sellerName={{sellerName}}&poIncomingId={{poIncomingId}}",
					"protocol": "https",
					"host": [
						"testingqa-office",
						"nexcloud",
						"id"
					],
					"path": [
						"testingqa",
						"farmindo",
						"poincomingdetailbyseller"
					],
					"query": [
						{
							"key": "order",
							"value": "id asc",
							"disabled": true
						},
						{
							"key": "sellerName",
							"value": "{{sellerName}}"
						},
						{
							"key": "poIncomingId",
							"value": "{{poIncomingId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af246157-fba3-47a1-9ae2-cb0210341776",
						"exec": [
							"const customer = JSON.parse(pm.environment.get(\"LIST_CUSTOMER\"))\r",
							"const status = JSON.parse(pm.environment.get(\"LIST_STATUS\"))\r",
							"let uom_Order = pm.environment.get(\"UOM_ORDER\")\r",
							"let arrayDataPoIncomingDetail = JSON.parse(pm.environment.get(\"arrayObjDataPOIncomingDetail\"))\r",
							"let responsePOIncomingSellers = JSON.parse(pm.environment.get(\"responseObjPOIncomingSellers\"))\r",
							"let indexDetail = pm.environment.get(\"indexAwalDetail\")\r",
							"let indexNoPO = pm.environment.get(\"indexAwalNoPO\")\r",
							"let responsesBody = pm.response.json()\r",
							"let responseProductCustomer = {}\r",
							"\r",
							"if(responsesBody.message !== 'Data Not Found'){\r",
							"\r",
							"    Object.keys(responsesBody[0]).forEach(function(key){\r",
							"        responseProductCustomer[key] = responsesBody[0][key];\r",
							"    })\r",
							"    pm.environment.set(\"responseProductCustomer\",JSON.stringify(responseProductCustomer))\r",
							"\r",
							"\r",
							"    pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"        pm.expect(pm.response.code).to.eql(200)\r",
							"\r",
							"        pm.test(\"productId Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productId)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productId Product Customer Sesuai dengan productCustomerId PO Incoming Detail\",function(){\r",
							"            pm.expect(responseProductCustomer.productId).to.eql(arrayDataPoIncomingDetail[indexDetail].productCustomerId)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productCode Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productCode)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productCode Product Customer Sesuai dengan productCode PO Incoming Detail\",function(){\r",
							"            pm.expect(responseProductCustomer.productCode).to.eql(arrayDataPoIncomingDetail[indexDetail].productCode)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productName Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productName)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productName Product Customer Sesuai dengan productName PO Incoming Detail\",function(){\r",
							"            pm.expect(responseProductCustomer.productName).to.eql(arrayDataPoIncomingDetail[indexDetail].productName)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerId Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.customerId)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerId Product Customer Sesuai dengan customerId PO Incoming Farmindo Web\",function(){\r",
							"            pm.expect(responseProductCustomer.customerId).to.eql(responsePOIncomingSellers.customerId)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerCode Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.customerCode)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerCode Product Customer Sesuai dengan customerCode PO Incoming Farmindo Web\",function(){\r",
							"            pm.expect(responseProductCustomer.customerCode).to.eql(responsePOIncomingSellers.customerCode)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerAlias Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.customerAlias)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customerAlias Product Customer Sesuai dengan customerName PO Incoming Farmindo Web\",function(){\r",
							"            pm.expect(responseProductCustomer.customerAlias).to.eql(responsePOIncomingSellers.customerName)\r",
							"        })\r",
							"        \r",
							"        pm.test(\"CustomerAlias \" + responseProductCustomer.customerAlias + \" ada di LIST_CUSTOMER\", function(){\r",
							"            pm.expect(Object.values(customer).includes(responseProductCustomer.customerAlias)).to.be.true\r",
							"        })\r",
							"        \r",
							"        pm.test(\"productUOM1 Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productUOM1)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productUOM2 Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productUOM2)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productUOM3 Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productUOM3)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productUOM4 Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productUOM4)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productConversion1to4 Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productConversion1to4)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productConversion2to4 Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productConversion2to4)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productConversion3to4 Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productConversion3to4)\r",
							"        })\r",
							"\r",
							"        pm.test(\"productOrderUnit Terisi\",function(){\r",
							"            pm.expect(responseProductCustomer.productOrderUnit)\r",
							"        })\r",
							"\r",
							"        \r",
							"        var uomOrder = null\r",
							"        var arrayUOM = [responseProductCustomer.productUOM1,responseProductCustomer.productUOM2,responseProductCustomer.productUOM3,responseProductCustomer.productUOM4];\r",
							"\r",
							"        if (responsePOIncomingSellers.customerName == customer.Alfamart || \r",
							"            responsePOIncomingSellers.customerName == customer.Alfamidi || \r",
							"            responsePOIncomingSellers.customerName == customer.Indomaret || \r",
							"            responsePOIncomingSellers.customerName == customer.Indogrosir || \r",
							"            responsePOIncomingSellers.customerName == customer.Superindo || \r",
							"            responsePOIncomingSellers.customerName == customer.Tiptop || \r",
							"            responsePOIncomingSellers.customerName == customer.Naga){\r",
							"\r",
							"            uomOrder = \"UOM_1\"\r",
							"            pm.environment.set(\"UOM_ORDER\",uomOrder)\r",
							"        \r",
							"        } else {\r",
							"            console.log('looping get uom Order')\r",
							"            for (var i = arrayUOM.length - 1; i >= 0; i--) {\r",
							"                if (arrayUOM[i] === responseProductCustomer.productOrderUnit) {\r",
							"                    uomOrder = \"UOM_\"+[i+1]\r",
							"                    console.log(uomOrder)\r",
							"                    pm.environment.set(\"UOM_ORDER\",uomOrder)\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"        console.log(\"UOM_ORDER : \" + uomOrder)\r",
							"\r",
							"        pm.test(\"uomOrder pada PO Incoming Detail dengan id \" + arrayDataPoIncomingDetail[indexDetail].id + \" sudah Benar berisi \" + uomOrder,function(){\r",
							"            pm.expect(arrayDataPoIncomingDetail[indexDetail].uomOrder).to.eql(uomOrder)\r",
							"        })\r",
							"        \r",
							"\r",
							"        console.log(\"Run Product Customer indexDetail ke \" + indexDetail)\r",
							"        postman.setNextRequest(\"Get Product Mapping\")\r",
							"\r",
							"    })\r",
							"} else {\r",
							"    pm.test(\"Pengecekan Detail Selesai\",function(){})\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9838dc55-8fb3-430a-97bb-6d85fd731f9e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2f3f80aa-1e14-4bc1-b7f0-c7f22e7fc259",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://testingqa-office.nexcloud.id/testingqa/farmindo/productcustomer?productId={{productId}}&productCode={{productCode}}",
					"protocol": "https",
					"host": [
						"testingqa-office",
						"nexcloud",
						"id"
					],
					"path": [
						"testingqa",
						"farmindo",
						"productcustomer"
					],
					"query": [
						{
							"key": "productId",
							"value": "{{productId}}"
						},
						{
							"key": "productCode",
							"value": "{{productCode}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Mapping",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "567c9578-9840-4de8-8cee-b062d79c04a2",
						"exec": [
							"let arrayDataPoIncomingDetail = JSON.parse(pm.environment.get(\"arrayObjDataPOIncomingDetail\"))\r",
							"let responsePOIncomingSellers = JSON.parse(pm.environment.get(\"responseObjPOIncomingSellers\"))\r",
							"const rules = JSON.parse(pm.environment.get(\"LIST_RULES\"))\r",
							"const status = JSON.parse(pm.environment.get(\"LIST_STATUS\"))\r",
							"let indexDetail = pm.environment.get(\"indexAwalDetail\")\r",
							"let indexNoPO = pm.environment.get(\"indexAwalNoPO\")\r",
							"let responsesBody = pm.response.json()\r",
							"let responseProductMapping = {}\r",
							"\r",
							"if(responsesBody.message !== 'Data Not Found'){\r",
							"    Object.keys(responsesBody[0]).forEach(function(key){\r",
							"        responseProductMapping[key] = responsesBody[0][key];\r",
							"    })\r",
							"    pm.environment.set(\"responseProductMapping\",JSON.stringify(responseProductMapping))\r",
							"\r",
							"\r",
							"    pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"        pm.expect(pm.response.code).to.eql(200)\r",
							"\r",
							"        pm.test(\"id Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"id sesuai dengan productMappingId pada PO Incoming Detail\",function(){\r",
							"            pm.expect(responseProductMapping.id).to.eql(arrayDataPoIncomingDetail[indexDetail].productMappingId)\r",
							"        })\r",
							"\r",
							"        // if(arrayDataPoIncomingDetail[indexDetail].productMappingRules === rules.Mapping){\r",
							"        //     pm.test(\"customer_store_mapping_id Terisi\",function(){\r",
							"        //         pm.expect(responseProductMapping.customer_store_mapping_id).not.null\r",
							"        //     })\r",
							"\r",
							"        //     pm.test(\"customer_store_mapping_id sesuai dengan customerStoreMappingId pada PO Incoming Detail\",function(){\r",
							"        //         pm.expect(responseProductMapping.customer_store_mapping_id).to.eql(responsePOIncomingSellers.customerStoreMappingId)\r",
							"        //     })\r",
							"        // } else {\r",
							"        //     pm.test(\"customer_store_mapping_id Terisi null karena Product Mapping Parent\",function(){\r",
							"        //         pm.expect(responseProductMapping.customer_store_mapping_id).is.null\r",
							"        //     })\r",
							"        // }\r",
							"\r",
							"        pm.test(\"product_principal_id Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.product_principal_id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"product_principal_id sesuai dengan productPrincipalId pada PO Incoming Detail\",function(){\r",
							"            pm.expect(responseProductMapping.product_principal_id).to.eql(arrayDataPoIncomingDetail[indexDetail].productPrincipalId)\r",
							"        })\r",
							"\r",
							"        pm.test(\"product_customer_id Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.product_customer_id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"product_customer_id sesuai dengan productCustomerId pada PO Incoming Detail\",function(){\r",
							"            pm.expect(responseProductMapping.product_customer_id).to.eql(arrayDataPoIncomingDetail[indexDetail].productCustomerId)\r",
							"        })\r",
							"\r",
							"        pm.test(\"principal_id Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.principal_id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"principal_id sesuai dengan principalId pada PO Incoming Seller\",function(){\r",
							"            pm.expect(responseProductMapping.principal_id).to.eql(responsePOIncomingSellers.principalId)\r",
							"        })\r",
							"\r",
							"        pm.test(\"customer_id Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.customer_id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"customer_id sesuai dengan customerId pada PO Incoming Seller\",function(){\r",
							"            pm.expect(responseProductMapping.customer_id).to.eql(responsePOIncomingSellers.customerId)\r",
							"        })\r",
							"\r",
							"        pm.test(\"uom_1 Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.uom_1).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"uom_2 Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.uom_2).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"uom_3 Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.uom_3).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"uom_4 Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.uom_4).not.null\r",
							"        })\r",
							"\r",
							"        var uomProductMapping = [responseProductMapping.uom_1,responseProductMapping.uom_2,responseProductMapping.uom_3,responseProductMapping.uom_4]\r",
							"        pm.environment.set(\"uomProductMapping\",uomProductMapping)\r",
							"\r",
							"        pm.test(\"conversion_1_to_4 Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.conversion_1_to_4).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"conversion_2_to_4 Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.conversion_2_to_4).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"conversion_3_to_4 Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.conversion_3_to_4).not.null\r",
							"        })\r",
							"\r",
							"        var conversionProductMapping = [responseProductMapping.conversion_1_to_4,responseProductMapping.conversion_2_to_4,responseProductMapping.conversion_3_to_4]\r",
							"        pm.environment.set(\"conversionProductMapping\",conversionProductMapping)\r",
							"\r",
							"        pm.test(\"order_unit Terisi\",function(){\r",
							"            pm.expect(responseProductMapping.order_unit).not.null\r",
							"        })\r",
							"\r",
							"        // pm.test(\"additional_data Terisi\",function(){\r",
							"        //     pm.expect(responseProductMapping.additional_data).not.null\r",
							"        // })\r",
							"\r",
							"        pm.test(\"Status Active\",function(){\r",
							"            pm.expect(responseProductMapping.status).to.eql(status.Active)\r",
							"        })\r",
							"\r",
							"        // var uomOrder = null\r",
							"        // var arrayUOM = [responseProductMapping.productUOM1,responseProductMapping.productUOM2,responseProductMapping.productUOM3,responseProductMapping.productUOM4];\r",
							"        // for (var i = arrayUOM.length - 1; i >= 0; i--) {\r",
							"        //     if (arrayUOM[i] === responseProductMapping.productOrderUnit) {\r",
							"        //         uomOrder = \"UOM_\"+[i+1]\r",
							"        //         pm.environment.set(\"UOM_ORDER\",uomOrder)\r",
							"        //     } else {\r",
							"        //         break;\r",
							"        //     }\r",
							"        // }\r",
							"\r",
							"        // console.log(uomOrder)\r",
							"\r",
							"        // pm.test(\"uomOrder pada PO Incoming Detail dengan id \" + arrayDataPoIncomingDetail[indexDetail].id + \" sudah Benar berisi \" + uomOrder,function(){\r",
							"        //     pm.expect(arrayDataPoIncomingDetail[indexDetail].uomOrder).to.eql(uomOrder)\r",
							"        // })\r",
							"\r",
							"    })\r",
							"\r",
							"    console.log(\"Run Product Mapping indexDetail ke \" + indexDetail)\r",
							"    postman.setNextRequest(\"Get Product Principal\")\r",
							"} else {\r",
							"    pm.test(\"Pengecekan Detail Selesai\",function(){})\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d153a2cf-4094-49da-b2ca-b865c26862e2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://testingqa-office.nexcloud.id/testingqa/farmindo/productmappingbyseller?productMappingId={{productMappingId}}&sellerName={{sellerName}}",
					"protocol": "https",
					"host": [
						"testingqa-office",
						"nexcloud",
						"id"
					],
					"path": [
						"testingqa",
						"farmindo",
						"productmappingbyseller"
					],
					"query": [
						{
							"key": "productMappingId",
							"value": "{{productMappingId}}"
						},
						{
							"key": "sellerName",
							"value": "{{sellerName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Principal",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dabd1859-d40c-494e-a8d3-8122a7c23f09",
						"exec": [
							"const status = JSON.parse(pm.environment.get(\"LIST_STATUS\"))\r",
							"let arrayDataPoIncomingDetail = JSON.parse(pm.environment.get(\"arrayObjDataPOIncomingDetail\"))\r",
							"let responsePOIncomingSellers = JSON.parse(pm.environment.get(\"responseObjPOIncomingSellers\"))\r",
							"let indexDetail = pm.environment.get(\"indexAwalDetail\")\r",
							"let isCollectInfo = pm.environment.get(\"isCollectInfo\")\r",
							"let responsesBody = pm.response.json()\r",
							"let responseProductPrincipal = {}\r",
							"\r",
							"if(responsesBody.message !== 'Data Not Found'){\r",
							"    Object.keys(responsesBody[0]).forEach(function(key){\r",
							"        responseProductPrincipal[key] = responsesBody[0][key];\r",
							"    })\r",
							"    pm.environment.set(\"responseProductPrincipal\",JSON.stringify(responseProductPrincipal))\r",
							"\r",
							"\r",
							"    pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"        pm.expect(pm.response.code).to.eql(200)\r",
							"\r",
							"        pm.test(\"principal_product_code Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.principal_product_code).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"product_name Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.product_name).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"uom_1 Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.uom_1).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"uom_2 Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.uom_1).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"uom_3 Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.uom_1).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"uom_4 Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.uom_1).not.null\r",
							"        })\r",
							"\r",
							"        var uomProductPrincipal = [responseProductPrincipal.uom_1,responseProductPrincipal.uom_2,responseProductPrincipal.uom_3,responseProductPrincipal.uom_4]\r",
							"        pm.environment.set(\"uomProductPrincipal\",uomProductPrincipal)\r",
							"\r",
							"\r",
							"        pm.test(\"conversion_1_to_4 Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.conversion_1_to_4).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"conversion_2_to_4 Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.conversion_2_to_4).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"conversion_3_to_4 Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.conversion_3_to_4).not.null\r",
							"        })\r",
							"\r",
							"        var conversionProductPrincipal = [responseProductPrincipal.conversion_1_to_4,responseProductPrincipal.conversion_2_to_4,responseProductPrincipal.conversion_3_to_4]\r",
							"        pm.environment.set(\"conversionProductPrincipal\",conversionProductPrincipal)\r",
							"\r",
							"        pm.test(\"order_unit Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.conversion_3_to_4).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"Status Active\",function(){\r",
							"            pm.expect(responseProductPrincipal.status).to.eql(status.Active)\r",
							"        })\r",
							"\r",
							"        pm.test(\"principal_id Terisi\",function(){\r",
							"            pm.expect(responseProductPrincipal.principal_id).not.null\r",
							"        })\r",
							"\r",
							"        pm.test(\"principal_id Product Principal Sesuai dengan principalId PO Incoming Farmindo Web\",function(){\r",
							"            pm.expect(responseProductPrincipal.principal_id).to.eql(responsePOIncomingSellers.principalId)\r",
							"        })\r",
							"\r",
							"        if (indexDetail < arrayDataPoIncomingDetail.length){\r",
							"            if(isCollectInfo === true){\r",
							"                pm.environment.set(\"isCollectInfo\",false)\r",
							"            }else{\r",
							"                pm.environment.set(\"isCollectInfo\",true)\r",
							"            }\r",
							"\r",
							"            //if(indexDetail === arrayDataPoIncomingDetail.length - 1) return;\r",
							"            postman.setNextRequest(\"Get PO Incoming Detail by Seller\")\r",
							"\r",
							"        }else {\r",
							"            pm.environment.set(\"indexAwalDetail\",Number(0))\r",
							"            postman.setNextRequest(\"Get PO Outgoing\")\r",
							"        }\r",
							"\r",
							"    })\r",
							"\r",
							"    console.log(\"Run Product Principal indexDetail ke \" + indexDetail)\r",
							"} else {\r",
							"    pm.test(\"Pengecekan Detail Selesai\",function(){})\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a9d61369-456a-4e57-8c2c-5070788b7c0a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://testingqa-office.nexcloud.id/testingqa/farmindo/productprincipalbyseller?sellerName={{sellerName}}&productPrincipalId={{productPrincipalId}}&productPrincipalCode={{productPrincipalCode}}",
					"protocol": "https",
					"host": [
						"testingqa-office",
						"nexcloud",
						"id"
					],
					"path": [
						"testingqa",
						"farmindo",
						"productprincipalbyseller"
					],
					"query": [
						{
							"key": "sellerName",
							"value": "{{sellerName}}"
						},
						{
							"key": "productPrincipalId",
							"value": "{{productPrincipalId}}"
						},
						{
							"key": "productPrincipalCode",
							"value": "{{productPrincipalCode}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PO Outgoing",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f1809fa4-961d-403a-a835-973a4ebc1df9",
						"exec": [
							"const customer = JSON.parse(pm.environment.get(\"LIST_CUSTOMER\"))\r",
							"const principal = JSON.parse(pm.environment.get(\"LIST_PRINCIPAL\"))\r",
							"const destination = JSON.parse(pm.environment.get(\"LIST_DESTINATION\"))\r",
							"const status = JSON.parse(pm.environment.get(\"LIST_STATUS\"))\r",
							"const messages = JSON.parse(pm.environment.get(\"LIST_MESSAGES\"))\r",
							"const connector = JSON.parse(pm.environment.get(\"LIST_CONNECTOR\"))\r",
							"let arrayDataPoIncoming = JSON.parse(pm.environment.get(\"arrayObjDataPOIncoming\"))\r",
							"let responsePOIncomingSellers = JSON.parse(pm.environment.get(\"responseObjPOIncomingSellers\"))\r",
							"let indexNoPO = pm.environment.get(\"indexAwalNoPO\")\r",
							"let responsesBody = pm.response.json()\r",
							"let responsePoOutgoing = {}\r",
							"//sorting DESC response body lalu yang di input ke object dengan index 0 (data pertama, dengan id paling terakhir)\r",
							"Object.keys(responsesBody.sort(function(a,b){return b.id - a.id})[0]).forEach(function(key){\r",
							"    responsePoOutgoing[key] = responsesBody[0][key];\r",
							"})\r",
							"pm.environment.set(\"responsePoOutgoing\",JSON.stringify(responsePoOutgoing))\r",
							"\r",
							"\r",
							"pm.test(\"Status Code Menghasilkan 200\",function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    pm.test(\"id Terisi \" + responsePoOutgoing.id,function(){\r",
							"        pm.expect(responsePoOutgoing.id).not.null\r",
							"    })\r",
							"\r",
							"    pm.test(\"noPO Terisi\",function(){\r",
							"        pm.expect(responsePoOutgoing.noPO).not.null\r",
							"    })\r",
							"\r",
							"    pm.test(\"noPO PO Outgoing Sesuai dengan poNumber PO Incoming Farmindo Web\",function(){\r",
							"        pm.expect(responsePoOutgoing.noPO).to.eql(responsePOIncomingSellers.poNumber)\r",
							"    })\r",
							"\r",
							"    pm.test(\"customerAlias Terisi\",function(){\r",
							"        pm.expect(responsePoOutgoing.customerAlias).not.null\r",
							"    })\r",
							"\r",
							"    pm.test(\"customerAlias PO Outgoing Sesuai dengan customerName PO Incoming Farmindo Web\",function(){\r",
							"        pm.expect(responsePoOutgoing.customerAlias).to.eql(responsePOIncomingSellers.customerName)\r",
							"    })\r",
							"\r",
							"    pm.test(\"CustomerAlias \" + responsePoOutgoing.customerAlias + \" ada di LIST_CUSTOMER\", function(){\r",
							"        pm.expect(Object.values(customer).includes(responsePoOutgoing.customerAlias)).to.be.true\r",
							"    })\r",
							"\r",
							"    pm.test(\"principalAlias Terisi\",function(){\r",
							"        pm.expect(responsePoOutgoing.principalAlias).not.null\r",
							"    })\r",
							"\r",
							"    pm.test(\"principalAlias PO Outgoing Sesuai dengan principalName PO Incoming Farmindo Web\",function(){\r",
							"        pm.expect(responsePoOutgoing.principalAlias).to.eql(responsePOIncomingSellers.principalName)\r",
							"    })\r",
							"\r",
							"    pm.test(\"PrincipalAlias \" + responsePoOutgoing.customerAlias + \" ada di LIST_PRINCIPAL\", function(){\r",
							"        pm.expect(Object.values(principal).includes(responsePoOutgoing.principalAlias)).to.be.true\r",
							"    })\r",
							"    \r",
							"    pm.test(\"flatFileName Terisi dengan Nama nopo.zip\",function(){\r",
							"        pm.expect(responsePoOutgoing.flatFileName).not.null\r",
							"        pm.expect(responsePoOutgoing.noPO + \".zip\").to.eql(responsePoOutgoing.flatFileName)\r",
							"    })\r",
							"\r",
							"    pm.test(\"flatFile Terisi\", function(){\r",
							"        pm.expect(responsePoOutgoing.flatFile).not.null\r",
							"    })\r",
							"    \r",
							"    pm.test(\"Destination untuk Principal \" + responsePoOutgoing.principalAlias + \" benar terisi \" + responsePoOutgoing.destination + \" dan connectorId benar terisi \" + responsePoOutgoing.connectorId,function(){\r",
							"        switch(responsePoOutgoing.principalAlias){\r",
							"            case principal.Cocacola:\r",
							"                pm.expect(responsePoOutgoing.principalAlias).to.eql(principal.Cocacola)\r",
							"                pm.expect(responsePoOutgoing.destination).to.be.oneOf(destination.As2)\r",
							"                //pm.expect(Object.values(destination).includes(responsePoOutgoing.destination)).to.be.true\r",
							"                pm.expect(responsePoOutgoing.connectorId).to.be.oneOf(connector.Cocacola)\r",
							"            break\r",
							"            case principal.Arnotts:\r",
							"                pm.expect(responsePoOutgoing.principalAlias).to.eql(principal.Arnotts)\r",
							"                pm.expect(responsePoOutgoing.destination).to.be.oneOf(destination.As2)\r",
							"                //pm.expect(Object.values(destination).includes(responsePoOutgoing.destination)).to.be.true\r",
							"                pm.expect(responsePoOutgoing.connectorId).to.be.oneOf(connector.Arnotts)\r",
							"            break\r",
							"            case principal.Png:\r",
							"                pm.expect(responsePoOutgoing.principalAlias).to.eql(principal.Png)\r",
							"                pm.expect(responsePoOutgoing.destination).to.be.oneOf(destination.As2)\r",
							"                //pm.expect(Object.values(destination).includes(responsePoOutgoing.destination)).to.be.true\r",
							"                pm.expect(responsePoOutgoing.connectorId).to.be.oneOf(connector.Png)\r",
							"            break\r",
							"            case principal.Nestle:\r",
							"                pm.expect(responsePoOutgoing.principalAlias).to.eql(principal.Nestle)\r",
							"                pm.expect(responsePoOutgoing.destination).to.be.oneOf(destination.As2)\r",
							"                //pm.expect(Object.values(destination).includes(responsePoOutgoing.destination)).to.be.true\r",
							"                pm.expect(responsePoOutgoing.connectorId).to.be.oneOf(connector.Nestle)\r",
							"            break\r",
							"            case principal.Unilever:\r",
							"                pm.expect(responsePoOutgoing.principalAlias).to.eql(principal.Unilever)\r",
							"                pm.expect(responsePoOutgoing.destination).to.be.oneOf(destination.As2)\r",
							"                //pm.expect(Object.values(destination).includes(responsePoOutgoing.destination)).to.be.true\r",
							"                pm.expect(responsePoOutgoing.connectorId).to.be.oneOf(connector.Unilever)\r",
							"            break\r",
							"            case principal.Philips:\r",
							"                pm.expect(responsePoOutgoing.principalAlias).to.eql(principal.Philips)\r",
							"                pm.expect(responsePoOutgoing.destination).to.be.oneOf(destination.As2)\r",
							"                //pm.expect(Object.values(destination).includes(responsePoOutgoing.destination)).to.be.true\r",
							"                pm.expect(responsePoOutgoing.connectorId).to.be.oneOf(connector.Philips)\r",
							"            break\r",
							"            case principal.Danone:\r",
							"                pm.expect(responsePoOutgoing.principalAlias).to.eql(principal.Danone)\r",
							"                pm.expect(responsePoOutgoing.destination).to.eql(destination.Sftp)\r",
							"                //pm.expect(Object.values(destination).includes(responsePoOutgoing.destination)).to.be.true\r",
							"                pm.expect(responsePoOutgoing.connectorId).to.be.oneOf(connector.Danone)\r",
							"            break\r",
							"            case principal.Kao:\r",
							"                pm.expect(responsePoOutgoing.principalAlias).to.eql(principal.Kao)\r",
							"                pm.expect(responsePoOutgoing.destination).to.eql(destination.Ftp)\r",
							"                //pm.expect(Object.values(destination).includes(responsePoOutgoing.destination)).to.be.true\r",
							"                pm.expect(responsePoOutgoing.connectorId).to.be.oneOf(connector.Kaokid)\r",
							"            break\r",
							"            case principal.Kid:\r",
							"                pm.expect(responsePoOutgoing.principalAlias).to.eql(principal.Kid)\r",
							"                pm.expect(responsePoOutgoing.destination).to.eql(destination.Ftp)\r",
							"                //pm.expect(Object.values(destination).includes(responsePoOutgoing.destination)).to.be.true\r",
							"                pm.expect(responsePoOutgoing.connectorId).to.be.oneOf(connector.Kaokid)\r",
							"            break\r",
							"        }\r",
							"        \r",
							"    })\r",
							"\r",
							"    pm.test(\"status \" + responsePoOutgoing.status + \" dan message benar terisi \" + responsePoOutgoing.message ,function(){\r",
							"        switch(arrayDataPoIncoming[indexNoPO].status){\r",
							"            case status.Success:\r",
							"                pm.expect(responsePoOutgoing.status).to.eql(status.Success)\r",
							"                pm.expect(responsePoOutgoing.message).to.eql(messages.Flatfilesuccessdelivered)\r",
							"            break\r",
							"        }\r",
							"    })\r",
							"\r",
							"    console.log(indexNoPO)\r",
							"    console.log(arrayDataPoIncoming.length)\r",
							"\r",
							"    if (indexNoPO < arrayDataPoIncoming.length){\r",
							"        pm.environment.set(\"indexAwalNoPO\",Number(indexNoPO + 1))\r",
							"        pm.environment.set(\"poNumber\",arrayDataPoIncoming[indexNoPO].noPO)\r",
							"\r",
							"        if(indexNoPO === arrayDataPoIncoming.length - 1) return;\r",
							"        pm.environment.set(\"indexAwalDetail\",Number(0))\r",
							"        postman.setNextRequest(\"Get PO Incoming\")\r",
							"        return\r",
							"    } else {\r",
							"        pm.environment.set(\"indexAwalNoPO\",Number(0))\r",
							"        postman.setNextRequest(null)\r",
							"    }\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							"console.log(\"Run PO Outgoing indexNoPO ke \" + indexNoPO)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "00e1eee2-530e-46a4-95b0-c2b08665e849",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2d13000b-d904-42d8-860e-12d6aefd0219",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenQA}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://testingqa-office.nexcloud.id/testingqa/farmindo/pooutgoing?noPO={{poNumber}}",
					"protocol": "https",
					"host": [
						"testingqa-office",
						"nexcloud",
						"id"
					],
					"path": [
						"testingqa",
						"farmindo",
						"pooutgoing"
					],
					"query": [
						{
							"key": "noPO",
							"value": "{{poNumber}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fcb9e1d9-3734-4a7c-9a72-df8f065b19cf",
				"type": "text/javascript",
				"exec": [
					"const principal = {",
					"    Arnotts     :'ARNOTTS',",
					"    Cocacola    :'COCACOLA',",
					"    Danone      :'DANONE',",
					"    Kao         :'KAO',",
					"    Kid         :'KID',",
					"    Nestle      :'NESTLE',",
					"    Philips     :'PHILIPS',",
					"    Png         :'PNG',",
					"    Unilever    :'UNILEVER'",
					"}",
					"const customer = {",
					"    Acehardware     :'ACEHARDWARE',",
					"    Acephilipines   :'ACEPHILIPINES',",
					"    Alfamart        :'ALFAMART',",
					"    Alfamidi        :'ALFAMIDI',",
					"    Carrefour       :'CARREFOUR',",
					"    Caturmitra      :'CATURMITRA',",
					"    Depobangunan    :'DEPOBANGUNAN',",
					"    Distphilips     :'DISTPHILIPS',",
					"    Foodhall        :'FOODHALL',",
					"    Gsretail        :'GSRETAIL',",
					"    Hero            :'HERO',",
					"    Hypermart       :'HYPERMART',",
					"    Indogrosir      :'INDOGROSIR',",
					"    Indomaret       :'INDOMARET',",
					"    Informa         :'INFORMA',",
					"    Le              :'LE',",
					"    Lotte           :'LOTTE',",
					"    Lulu            :'LULU',",
					"    Makroindo       :'MAKROINDO',",
					"    Matahari        :'MATAHARI',",
					"    Naga            :'NAGA',",
					"    Ramayana        :'RAMAYANA',",
					"    Superindo       :'SUPERINDO',",
					"    Tiptop          :'TIPTOP',",
					"    Toyskingdom     :'TOYSKINGDOM',",
					"    Waltermart      :'WALTERMART',",
					"    Yogya           :'YOGYA'",
					"}",
					"const action = {",
					"    Matching    :'MATCHING',",
					"    Split       :'SPLIT',",
					"    Normal      :'NORMAL',",
					"    Transform   :'TRANSFORM'",
					"}",
					"const status = {",
					"    Success                         :'SUCCESS',",
					"    Process                         :'PROCESS',",
					"    Failed                          :'FAILED',",
					"    Success_with_unmapped           :'SUCCESS_WITH_UNMAPPED',",
					"    Success_without_send_flatfile   :'SUCCESS WITHOUT SEND FLAT FILE',",
					"    Active                          : 'A'",
					"}",
					"const destination = {",
					"    Ftp     :'FTP',",
					"    Sftp    :'SFTP',",
					"    As2     :['FTP','AS2']// karena staging ada FTP",
					"}",
					"const connector = {",
					"    // Staging      : 10.10.11.134:21",
					"    // Production   : 10.10.70.30:21",
					"",
					"    // Jika nembak langsung ke AS2, sekarang tidak menggunakan ini lagi.",
					"    // Cocacola    :\"/cocacola\",",
					"    // Arnotts     :\"/arnotts\",",
					"    // Png         :\"/png\",",
					"    // Philips     :\"/philips\",",
					"    // Unilever    :\"/unilever\",",
					"    // Nestle      :\"/nestle\",",
					"    // Danone      :\"testarcesb.farmindo.com:4022\",",
					"    // Kaokid      :\"testarcesb.farmindo.com:4021\"",
					"    ",
					"    Cocacola    :[\"10.10.11.134:21\",\"/cocacola\"],",
					"    Arnotts     :[\"10.10.11.134:21\",\"/arnotts\"],",
					"    Png         :[\"10.10.11.134:21\",\"/png\"],",
					"    Philips     :[\"10.10.11.134:21\",\"/philips\"],",
					"    Unilever    :[\"10.10.11.134:21\",\"/unilever\"],",
					"    Nestle      :[\"10.10.11.134:21\",\"/nestle\"],",
					"    Danone      :[\"10.10.11.134:21\",\"testarcesb.farmindo.com:4022\"],",
					"    Kaokid      :[\"10.10.11.134:21\",\"testarcesb.farmindo.com:4021\"]",
					"}",
					"const messages = {",
					"    Success                         : \"SUCCESS PARSER FILE\",",
					"    Success_with_unmapped           : \"SUCCESS PARSER WITH UNMAPPED PRODUCT\",",
					"    Success_without_send_flatfile   : \"530 Login incorrect.\",",
					"    Deliveryflatfile                : \"DELIVERY FLATFILE\",",
					"    Faileddeliveryflatfile          : \"FAILED DELIVERY FLATFILE\",",
					"    Flatfilesuccessdelivered        : \"FLATFILE SUCCESS DELIVERED\",",
					"    Matching                        : \"success matching po\",",
					"    Split                           : \"success split po\",",
					"    Transform                       : \"success trasnform po\",",
					"    Normal                          : \"success proccess normal po\"",
					"}",
					"const rules = {",
					"    Mapping         : \"MAPPING\",",
					"    Mapping_parent  : \"MAPPING-PARENT\",",
					"    Notmapping      : \"NOT_MAPPING\",",
					"    Pmhandling_A    : \"A\",",
					"    Pmhandling_I    : \"I\",",
					"    Prodmap_Y       : \"Y\",",
					"    Prodmap_N       : \"N\"",
					"}",
					"",
					"pm.environment.set(\"LIST_PRINCIPAL\", JSON.stringify(principal))",
					"pm.environment.set(\"LIST_CUSTOMER\", JSON.stringify(customer))",
					"pm.environment.set(\"LIST_ACTION\", JSON.stringify(action))",
					"pm.environment.set(\"LIST_STATUS\", JSON.stringify(status))",
					"pm.environment.set(\"LIST_DESTINATION\", JSON.stringify(destination))",
					"pm.environment.set(\"LIST_RULES\", JSON.stringify(rules))",
					"pm.environment.set(\"LIST_MESSAGES\", JSON.stringify(messages))",
					"pm.environment.set(\"LIST_CONNECTOR\", JSON.stringify(connector))",
					"",
					"",
					"UtilFunctions = {",
					"    checkFlatFileName : function(principalName,customerName,fileNameOut,poNumber, farmindoStore, distributorName,principalStoreId, createdDate, storeName) {",
					"",
					"        pm.test(\"Format fileNameOut(FLATFILE), Valid!\",function(){",
					"            if (principalName === principal.Philips){",
					"                var resultDatePhilips1 = (createdDate.replace(/[-:.TZ]/g, '')).slice(0, -3)",
					"",
					"                // 2023-07-01T01:10:19.36374Z   =   2023070101101936",
					"                // 2023-07-01T01:10:19.204593Z  =   20230701011019204",
					"                // if below used to handle case above",
					"                if(resultDatePhilips1.length < 17 ){",
					"                    resultDatePhilips1 = (createdDate.replace(/[-:.TZ]/g, '')).slice(0, -2)",
					"                }",
					"",
					"                // 20230701011019024    =   2023070101101924",
					"                // if below used to handle case above",
					"                if(resultDatePhilips1.charAt(resultDatePhilips1.length - 3) === '0'){",
					"                    var resultDatePhilips2 = resultDatePhilips1.substr(0, resultDatePhilips1.length - 3) + resultDatePhilips1.substr(-2, 2)",
					"                }",
					"",
					"                if(fileNameOut.length === 30){",
					"                    console.log(\"EXPECT : IF400BNA.\" + resultDatePhilips1 + \".dat\")",
					"                    pm.expect(fileNameOut).to.eql(\"IF400BNA.\" + resultDatePhilips1 + \".dat\")",
					"                } else {",
					"                    console.log(\"EXPECT : IF400BNA.\" + resultDatePhilips2 + \".dat\")",
					"                    pm.expect(fileNameOut).to.eql(\"IF400BNA.\" + resultDatePhilips2 + \".dat\")",
					"",
					"                }",
					"                ",
					"            }else if (principalName === principal.Arnotts){",
					"",
					"                if (customerName === customer.Alfamart){",
					"                    console.log(\"EXPECT : alfa@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"alfa@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Alfamidi){",
					"                    console.log(\"EXPECT : midi@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"midi@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Carrefour){",
					"                    console.log(\"EXPECT : carrefour@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"carrefour@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Hero){",
					"                    console.log(\"EXPECT : hero@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"hero@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Indomaret){",
					"                    console.log(\"EXPECT : indomar@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"indomar@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Lotte){",
					"                    console.log(\"EXPECT : lotte@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"lotte@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Makroindo){",
					"                    console.log(\"EXPECT : makro@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"makro@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Matahari){",
					"                    console.log(\"EXPECT : matahari@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"matahari@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Naga){",
					"                    console.log(\"EXPECT : naga@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"naga@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Ramayana){",
					"                    if(storeName.indexOf(\"Lestari\")){",
					"                        console.log(\"EXPECT : rals@\" + poNumber + \".csv\")",
					"                        pm.expect(fileNameOut).to.eql(\"rals@\" + poNumber + \".csv\")",
					"                    }else if(storeName.indexOf(\"Fantasi\")){",
					"                        console.log(\"EXPECT : fantasi@\" + poNumber + \".csv\")",
					"                        pm.expect(fileNameOut).to.eql(\"fantasi@\" + poNumber + \".csv\")",
					"                    }else if (storeName.indexOf(\"Makmur\")){",
					"                        console.log(\"EXPECT : rams@\" + poNumber + \".csv\")",
					"                        pm.expect(fileNameOut).to.eql(\"rams@\" + poNumber + \".csv\")",
					"                    }",
					"                } else if(customerName === customer.Superindo){",
					"                    console.log(\"EXPECT : superindo@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"superindo@\" + poNumber + \".csv\")",
					"                } else if(customerName === customer.Tiptop){",
					"                    console.log(\"EXPECT : ttop@\" + poNumber + \".csv\")",
					"                    pm.expect(fileNameOut).to.eql(\"ttop@\" + poNumber + \".csv\")",
					"                }",
					"",
					"            }else if (principalName === principal.Cocacola){",
					"",
					"                var resultDateCocacola = (createdDate.replace(/[-:.TZ]/g, '')).slice(0, -8)",
					"                ",
					"                console.log(\"EXPECT: \" + principalStoreId + \"_\" + resultDateCocacola + \"_\" + poNumber + \".xml\")",
					"                pm.expect(fileNameOut).to.eql(principalStoreId + \"_\" + resultDateCocacola + \"_\" + poNumber + \".xml\")",
					"            ",
					"            }else if (principalName === principal.Danone){",
					"",
					"                console.log(\"EXPECT : PO_\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                pm.expect(fileNameOut).to.eql(\"PO_\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"",
					"            }else if (principalName === principal.Kao || principalName === principal.Kid){",
					"",
					"                if (customerName === customer.Alfamart){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@alfamart@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@alfamart@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Alfamidi){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@alfamidi@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@alfamidi@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Carrefour){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@carrefour@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@carrefour@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Foodhall){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@foodhall@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@foodhall@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Indomaret){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@indomaret@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@indomaret@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Lotte){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@lotte@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@lotte@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Makroindo){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@makroindo@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@makroindo@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Matahari){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@matahari@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@matahari@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Naga){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@naga@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@naga@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Ramayana){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@ramayana@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@ramayana@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Superindo){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@superindo@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@superindo@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === customer.Tiptop){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@tiptop@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@tiptop@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                } else if(customerName === \"YOGYA\"){",
					"                    console.log(\"EXPECT: \" + distributorName + \"@yogya@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                    pm.expect(fileNameOut).to.eql(distributorName + \"@yogya@PO\" + farmindoStore + \"_\" + poNumber + \".txt\")",
					"                }",
					"                ",
					"            }else if (principalName === principal.Nestle){",
					"",
					"                console.log(\"EXPECT: \" + poNumber + \".dat\")",
					"                pm.expect(fileNameOut).to.eql(poNumber + \".dat\")",
					"                ",
					"            }else if (principalName === principal.Png){",
					"",
					"                console.log(\"EXPECT: \" + poNumber + \".dat\")",
					"                pm.expect(fileNameOut).to.eql(poNumber + \".dat\")",
					"                ",
					"            }else if (principalName === principal.Unilever){",
					"",
					"                if (customerName === customer.Naga){",
					"                    console.log(\"EXPECT: 110004_\" + poNumber + \".xml\")",
					"                    pm.expect(fileNameOut).to.eql(\"110004_\" + poNumber + \".xml\")",
					"                } else if(customerName === customer.Ramayana){",
					"                    console.log(\"EXPECT: ramayana_\" + poNumber + \".xml\")",
					"                    pm.expect(fileNameOut).to.eql(\"ramayana_\" + poNumber + \".xml\")",
					"                } else if(customerName === customer.Tiptop){",
					"                    console.log(\"EXPECT: TipTop_\" + poNumber + \".xml\")",
					"                    pm.expect(fileNameOut).to.eql(\"TipTop_\" + poNumber + \".xml\")",
					"                } else if(customerName === \"YOGYA\"){",
					"                    console.log(\"EXPECT: YogyaGriya_\" + poNumber + \".xml\")",
					"                    pm.expect(fileNameOut).to.eql(\"YogyaGriya_\" + poNumber + \".xml\")",
					"                }",
					"            }",
					"        })",
					"    },",
					"",
					"    // Info Backend TOP tidak terisi di po incoming",
					"    checkTop : function(principalName,customerName,top){",
					"        if(customerName === customer.Distphilips && principalName === principal.Philips){",
					"            pm.test(\"top Terisi null\",function(){",
					"                pm.expect(top).is.null",
					"            })",
					"        } else if(customerName === customer.Makroindo && principalName === principal.Philips){",
					"            pm.test(\"top Terisi null\",function(){",
					"                pm.expect(top).is.null",
					"            })",
					"        } else if(customerName === customer.Superindo && principalName === principal.Philips){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Alfamart && principalName === principal.Philips){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Alfamidi && principalName === principal.Philips){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Tiptop && principalName === principal.Arnotts){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Superindo && principalName === principal.Arnotts){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Superindo && principalName === principal.Danone){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Tiptop && principalName === principal.Kao){",
					"            pm.test(\"top Terisi 21\",function(){",
					"                pm.expect(top).to.eql(\"21\")",
					"            })",
					"        } else if(customerName === customer.Superindo && principalName === principal.Kao){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Superindo && principalName === principal.Kid){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Tiptop && principalName === principal.Kid){",
					"            pm.test(\"top Terisi 21\",function(){",
					"                pm.expect(top).to.eql(\"21\")",
					"            })",
					"        } else if(customerName === customer.Superindo && principalName === principal.Nestle){",
					"            pm.test(\"top Terisi 14\",function(){",
					"                pm.expect(top).to.eql(\"14\")",
					"            })",
					"        } else if(customerName === customer.Superindo && principalName === principal.Png){",
					"            pm.test(\"top Terisi 2\",function(){",
					"                pm.expect(top).to.eql(\"2\")",
					"            })",
					"        } else if(customerName === customer.Alfamart && principalName === principal.Png){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Alfamidi && principalName === principal.Png){",
					"            pm.test(\"top Terisi 30\",function(){",
					"                pm.expect(top).to.eql(\"30\")",
					"            })",
					"        } else if(customerName === customer.Tiptop && principalName === principal.Unilever){",
					"            pm.test(\"top Terisi 14\",function(){",
					"                pm.expect(top).to.eql(\"14\")",
					"            })",
					"        } else {",
					"            pm.test(\"top Terisi null\",function(){",
					"                pm.expect(top).to.eql(null)",
					"            })",
					"        }",
					"    },",
					"",
					"    checkLineGrossAmount : function(qty1, qty2, priceUOM1, priceUOM2, lineGrossAmount, priceTolerance, customerName, lineDiscount1, totalLineDiscount){",
					"        if(customerName === customer.Ramayana && lineDiscount1 !== 0 && totalLineDiscount !== 0){",
					"",
					"            var gross = qty1*priceUOM1",
					"            var disc = lineDiscount1/100",
					"",
					"            pm.test(`lineGrossAmount = (Qty1 * PriceUOM1) - lineDiscount1 = (${qty1} * ${priceUOM1}) - ${lineDiscount1}% = ${Math.trunc(gross - (gross * disc))}, Sudah Sesuai`,function(){  ",
					"                    pm.expect(Math.trunc(lineGrossAmount)).to.be.closeTo(Math.trunc(gross - (gross * disc)),Number(priceTolerance))",
					"                })",
					"",
					"        }else {",
					"        ",
					"            if(qty1 !== 0){",
					"                pm.test(\"lineGrossAmount = Qty1 * PriceUOM1 = \" + qty1 + \" * \" + priceUOM1 + \" = \" + (Math.trunc(qty1 * priceUOM1)) + \", Sudah Sesuai\",function(){  ",
					"                    pm.expect(Math.trunc(lineGrossAmount)).to.be.closeTo((Math.trunc(qty1 * priceUOM1)),Number(priceTolerance))",
					"                })",
					"            } else {",
					"                pm.test(\"lineGrossAmount = Qty2 * PriceUOM2 = \" + qty2 + \" * \" + priceUOM2 + \" = \" + (Math.trunc(qty2 * priceUOM2)) + \", Sudah Sesuai\",function(){  ",
					"                    pm.expect(Math.trunc(lineGrossAmount)).to.be.closeTo((Math.trunc(qty2 * priceUOM2)),Number(priceTolerance))",
					"                })",
					"",
					"            }",
					"        }",
					"        ",
					"    },",
					"",
					"    checkLineDppAmount : function(principalName,customerName, lineDiscount1, lineGrossAmount, lineDppAmount, priceTolerance, totalLineDiscount){",
					"            if ((customerName === customer.Superindo && principalName === principal.Nestle) || ",
					"                (customerName === customer.Superindo && principalName === principal.Danone) || ",
					"                (customerName === customer.Superindo && principalName === principal.Arnotts) || ",
					"                (customerName === customer.Superindo && principalName === principal.Kao) || ",
					"                (customerName === customer.Superindo && principalName === principal.Kid)){",
					"                //Money",
					"                if(totalLineDiscount !== 0 && (lineDiscount1 === 0 || lineDiscount1 !== 0)){",
					"                    pm.test(`lineDppAmount = lineGrossAmount - totalLineDiscount = ${lineGrossAmount} - ${totalLineDiscount} = ${lineGrossAmount - totalLineDiscount}`,function(){",
					"                        pm.expect(lineDppAmount).to.be.closeTo(lineGrossAmount - totalLineDiscount,Number(priceTolerance))",
					"                    })",
					"                } else {",
					"                    pm.test(`lineDppAmount = lineGrossAmount - lineDiscount1 = ${lineGrossAmount} - ${lineDiscount1} = ${lineGrossAmount - lineDiscount1}`,function(){",
					"                        pm.expect(lineDppAmount).to.be.closeTo(lineGrossAmount - lineDiscount1,Number(priceTolerance))",
					"                    })",
					"                }",
					"            } else {",
					"                //Percent",
					"                var disc = lineDiscount1/100",
					"                console.log(disc)",
					"                if(totalLineDiscount !== 0 && (lineDiscount1 === 0 || lineDiscount1 !== 0)){",
					"                    pm.test(`lineDppAmount = lineGrossAmount - totalLineDiscount = ${lineGrossAmount} - ${totalLineDiscount} = ${lineGrossAmount - totalLineDiscount}`,function(){",
					"                        pm.expect(lineDppAmount).to.be.closeTo(lineGrossAmount - totalLineDiscount,Number(priceTolerance))",
					"                    })",
					"                } else {",
					"                    pm.test(`lineDppAmount = lineGrossAmount - (lineGrossAmount * lineDiscount1) = ${lineGrossAmount} - (${lineGrossAmount} * ${lineDiscount1}%) = ${lineGrossAmount - (lineGrossAmount * disc) }`,function(){",
					"                        pm.expect(lineDppAmount).to.be.closeTo(lineGrossAmount - (lineGrossAmount * disc),Number(priceTolerance))",
					"                    })",
					"                }",
					"            }",
					"        ",
					"    },",
					"",
					"    checkLineVatAmount : function(lineDppAmount, lineVatAmount, customerName, lineNetAmount, priceTolerance){",
					"        var tax = 0.11",
					"",
					"        if(customerName === customer.Acephilipines || customerName === customer.Le || customerName === customer.Waltermart){",
					"            tax = 0",
					"        }",
					"",
					"        if(customerName === customer.Ramayana){",
					"            pm.test(`lineVatAmount = lineNetAmount - lineDppAmount = ${lineNetAmount} - ${lineDppAmount} = ` + (Math.trunc(lineNetAmount - lineDppAmount)) + \", Sudah Sesuai\",function(){",
					"                pm.expect(Math.trunc(lineVatAmount)).to.be.closeTo((Math.trunc(lineNetAmount - lineDppAmount)), Number(priceTolerance))",
					"            })",
					"",
					"        } else {",
					"            pm.test(`lineVatAmount = lineDppAmount * ${tax} = ${lineDppAmount} * ${tax} = ` + (Math.trunc(lineDppAmount * tax)) + \", Sudah Sesuai\",function(){",
					"                pm.expect(Math.trunc(lineVatAmount)).to.be.closeTo((Math.trunc(lineDppAmount * tax)), Number(priceTolerance))",
					"            })",
					"        }",
					"",
					"        ",
					"    },",
					"",
					"    checkLineNetAmount: function(lineDppAmount, lineVatAmount, lineNetAmount, priceTolerance){",
					"        pm.test(\"lineNetAmount = lineDppAmount + lineVatAmount = \" + lineDppAmount + \" + \" + lineVatAmount + \" = \" + (Math.trunc(lineDppAmount + lineVatAmount)) + \", Sudah Sesuai\",function(){",
					"            pm.expect(Math.trunc(lineNetAmount)).to.be.closeTo((Math.trunc(lineDppAmount + lineVatAmount)),Number(priceTolerance))",
					"        })",
					"    },",
					"",
					"    checkHargaTotal(grossAmount, totalLineGrossAmount, dppAmount, discountValue, totalLineDppAmount, vatAmount, totalLineVatAmount, netAmount, totalLineNetAmount, priceTolerance, customerName){",
					"",
					"        if(discountValue > 0){",
					"            totalLineDppAmount -= discountValue",
					"            totalLineVatAmount = totalLineDppAmount * 0.11",
					"            totalLineNetAmount = totalLineDppAmount + totalLineVatAmount",
					"        }",
					"",
					"        console.log(`New totalLineDppAmount : ${totalLineDppAmount}`)",
					"        console.log(`New totalLineVatAmount : ${totalLineVatAmount}`)",
					"        console.log(`New totalLineNetAmount : ${totalLineNetAmount}`)",
					"",
					"        if(customerName === customer.Ramayana){",
					"            totalLineVatAmount = netAmount - dppAmount",
					"            totalLineNetAmount = dppAmount + vatAmount",
					"            ",
					"            console.log(`New 2 totalLineVatAmount : ${totalLineVatAmount}`)",
					"            console.log(`New 2 totalLineNetAmount : ${totalLineNetAmount}`)",
					"        }",
					"",
					"        pm.test(\"Harga Total Line GROSS PO Incoming Detail sesuai dengan Harga GROSS Amount pada PO Incoming Seller, Dengan Toleransi Harga sebesar Rp \" + priceTolerance,function(){",
					"            pm.expect(Math.trunc(grossAmount)).to.be.closeTo(Math.trunc(totalLineGrossAmount),Number(priceTolerance))",
					"        })",
					"",
					"        pm.test(\"Harga Total Line DPP PO Incoming Detail sesuai dengan Harga DPP Amount pada PO Incoming Seller, Dengan Toleransi Harga sebesar Rp \" + priceTolerance,function(){",
					"            pm.expect(Math.trunc(dppAmount)).to.be.closeTo(Math.trunc(totalLineDppAmount),Number(priceTolerance))",
					"        })",
					"",
					"        pm.test(\"Harga Total Line VAT PO Incoming Detail sesuai dengan Harga VAT Amount pada PO Incoming Seller, Dengan Toleransi Harga sebesar Rp \" + priceTolerance,function(){",
					"            pm.expect(Math.trunc(vatAmount)).to.be.closeTo(Math.trunc(totalLineVatAmount),Number(priceTolerance))",
					"        })",
					"",
					"        pm.test(\"Harga Total Line NET PO Incoming Detail sesuai dengan Harga NET Amount pada PO Incoming Seller, Dengan Toleransi Harga sebesar Rp \" + priceTolerance,function(){",
					"            pm.expect(Math.trunc(netAmount)).to.be.closeTo(Math.trunc(totalLineNetAmount),Number(priceTolerance))",
					"        })",
					"    },",
					"    ",
					"    checkQtyPriceuomDariDataProductMapping(id, uom1, uom2, uom3, uom4, uomProductMapping, uom_Order, qtyOrder, conversionProductMapping, qty1, qty2, qty3, qty4, linePricePerItem, priceUOM1, priceUOM2, priceUOM3, priceUOM4, priceTolerance){",
					"        pm.test(\"Pengecekan UOM pada PO Incoming Detail Id \" + id,function(){",
					"            pm.test(\"UOM_1 sudah sesuai dengan UOM_1 Product Mapping\",function(){",
					"                pm.expect(uom1).to.eql(uomProductMapping[0])",
					"            })",
					"            pm.test(\"UOM_2 sudah sesuai dengan UOM_2 Product Mapping\",function(){",
					"                pm.expect(uom2).to.eql(uomProductMapping[1])",
					"            })",
					"            pm.test(\"UOM_3 sudah sesuai dengan UOM_3 Product Mapping\",function(){",
					"                pm.expect(uom3).to.eql(uomProductMapping[2])",
					"            })",
					"            pm.test(\"UOM_4 sudah sesuai dengan UOM_4 Product Mapping\",function(){",
					"                pm.expect(uom4).to.eql(uomProductMapping[3])",
					"            })",
					"        })",
					"",
					"        //Pengecekan QTY1-3 dan PriceUOM1-4 dengan kalkulasi conversion dari Product Mapping",
					"        switch(uom_Order){",
					"            case \"UOM_1\":",
					"                //qty1",
					"                pm.test(\"Qty1 = qtyOrder = \" + qty1 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_1\",function(){",
					"                    pm.expect(qty1).to.eql(qtyOrder)",
					"                })",
					"                ",
					"                //qty4",
					"                pm.test(\"Qty4 = qtyOrder * conv1to4 = \" + qty1 + \" * \" + conversionProductMapping[0] + \" = \" + Math.round(qty1 * conversionProductMapping[0]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty4).to.eql(Math.round(qty1 * conversionProductMapping[0]))",
					"                })",
					"",
					"                //qty2",
					"                pm.test(\"Qty2 = qty4 / conv2to4 = \" + qty1 * conversionProductMapping[0] + \" / \" + conversionProductMapping[1] + \" = \" + Math.round(((qty1 * conversionProductMapping[0]) /conversionProductMapping[1])) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty2).to.eql(Math.round((qty1 * conversionProductMapping[0]) / conversionProductMapping[1]))",
					"                })",
					"                ",
					"                //qty3",
					"                pm.test(\"Qty3 = qty4 / conv3to4 = \" + qty1 * conversionProductMapping[0] + \" / \" + conversionProductMapping[2] + \" = \" + Math.round(((qty1 * conversionProductMapping[0]) /conversionProductMapping[2])) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty3).to.eql(Math.round((qty1 * conversionProductMapping[0]) / conversionProductMapping[2]))",
					"                })",
					"",
					"                //----------------------------------------------------------------------------------",
					"                //priceUOM1",
					"                pm.test(\"priceUOM1 = linePricePerItem = \" + priceUOM1 + \" = \" + linePricePerItem + \", karena uomOrder berisi UOM_1\",function(){",
					"                    pm.expect(priceUOM1).to.eql(linePricePerItem)",
					"                })",
					"                ",
					"                //priceUOM4",
					"                pm.test(\"priceUOM4 = linePricePerItem / conv1to4 = \" + priceUOM1 + \" / \" + conversionProductMapping[0] + \" = \" + (Math.trunc(priceUOM1 / conversionProductMapping[0])) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM4).to.be.closeTo(Math.trunc(priceUOM1 / conversionProductMapping[0]), Number(priceTolerance))",
					"                })",
					"",
					"                //priceUOM2",
					"                pm.test(\"priceUOM2 = priceUOM4 * conv2to4 = \" + priceUOM1 / conversionProductMapping[0] + \" * \" + conversionProductMapping[1] + \" = \" + (Math.trunc(priceUOM1 / conversionProductMapping[0]) * conversionProductMapping[1]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM2).to.be.closeTo(Math.trunc((priceUOM1 / conversionProductMapping[0]) * conversionProductMapping[1]),Number(priceTolerance))",
					"                })",
					"                ",
					"                //priceUOM3",
					"                pm.test(\"priceUOM3 = priceUOM4 * conv3to4 = \" + priceUOM1 / conversionProductMapping[0] + \" * \" + conversionProductMapping[2] + \" = \" + (Math.trunc(priceUOM1 / conversionProductMapping[0]) * conversionProductMapping[2]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM3).to.be.closeTo(Math.trunc((priceUOM1 / conversionProductMapping[0]) * conversionProductMapping[2]),Number(priceTolerance))",
					"                })",
					"            break",
					"            case \"UOM_2\":",
					"                //qty2",
					"                pm.test(\"Qty2 = qtyOrder = \" + qty2 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_2\",function(){",
					"                    pm.expect(qty2).to.eql(qtyOrder)",
					"                })",
					"                ",
					"                //qty4",
					"                pm.test(\"Qty4 = qtyOrder * conv2to4 = \" + qty2 + \" * \" + conversionProductMapping[1] + \" = \" + Math.round(qty2 * conversionProductMapping[1]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty4).to.eql(Math.round((qty2 * conversionProductMapping[1])))",
					"                })",
					"",
					"                //qty1",
					"                pm.test(\"Qty1 = qty4 / conv1to4 = \" + qty2 * conversionProductMapping[1] + \" / \" + conversionProductMapping[0] + \" = \" + Math.round((qty2 * conversionProductMapping[1]) /conversionProductMapping[0]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty1).to.eql(Math.round((qty2 * conversionProductMapping[1]) / conversionProductMapping[0]))",
					"                })",
					"                ",
					"                //qty3",
					"                pm.test(\"Qty3 = qty4 / conv3to4 = \" + qty2 * conversionProductMapping[1] + \" / \" + conversionProductMapping[2] + \" = \" + Math.round((qty2 * conversionProductMapping[1])/conversionProductMapping[2]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty3).to.eql(Math.round((qty2 * conversionProductMapping[1]) /conversionProductMapping[2]))",
					"                })",
					"                ",
					"                //----------------------------------------------------------------------------------",
					"                //priceuom2",
					"                pm.test(\"priceUOM2 = linePricePerItem = \" + priceUOM2 + \" = \" + linePricePerItem + \", karena uomOrder berisi UOM_2\",function(){",
					"                    pm.expect(priceUOM2).to.eql(linePricePerItem)",
					"                })",
					"                ",
					"                //priceuom4",
					"                pm.test(\"priceUOM4 = linePricePerItem / conv2to4 = \" + priceUOM2 + \" / \" + conversionProductMapping[1] + \" = \" + (Math.trunc(priceUOM2 / conversionProductMapping[1])) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM4).to.be.closeTo(Math.trunc(priceUOM2 / conversionProductMapping[1]),Number(priceTolerance))",
					"                })",
					"",
					"                //priceuom1",
					"                pm.test(\"priceUOM1 = priceUOM4 * conv1to4 = \" + priceUOM2 / conversionProductMapping[1] + \" * \" + conversionProductMapping[0] + \" = \" + (Math.trunc(priceUOM2 / conversionProductMapping[1]) * conversionProductMapping[0]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(Math.trunc(priceUOM1)).to.be.closeTo(Math.trunc((priceUOM2 / conversionProductMapping[1]) * conversionProductMapping[0]), Number(priceTolerance))",
					"                })",
					"                ",
					"                //priceuom3",
					"                pm.test(\"priceUOM3 = priceUOM4 * conv3to4 = \" + priceUOM2 / conversionProductMapping[1] + \" * \" + conversionProductMapping[2] + \" = \" + (Math.trunc(priceUOM2 / conversionProductMapping[1]) * conversionProductMapping[2]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM3).to.be.closeTo(Math.trunc((priceUOM2 / conversionProductMapping[1]) * conversionProductMapping[2]),Number(priceTolerance))",
					"                })",
					"            break",
					"            case \"UOM_3\":",
					"                //qty3",
					"                pm.test(\"Qty3 = qtyOrder = \" + qty3 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_3\",function(){",
					"                    pm.expect(qty3).to.eql(qtyOrder)",
					"                })",
					"                ",
					"                //qty4",
					"                pm.test(\"Qty4 = qtyOrder * conv3to4 = \" + qty3 + \" * \" + conversionProductMapping[2] + \" = \" + Math.round(qty3 * conversionProductMapping[2]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty4).to.eql(Math.round(qty3 * conversionProductMapping[2]))",
					"                })",
					"",
					"                //qty1",
					"                pm.test(\"Qty1 = qty4 / conv1to4 = \" + qty3 * conversionProductMapping[2] + \" / \" + conversionProductMapping[0] + \" = \" + Math.round((qty3 * conversionProductMapping[2]) /conversionProductMapping[0]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty1).to.eql(Math.round((qty3 * conversionProductMapping[2])/conversionProductMapping[0]))",
					"                })",
					"                ",
					"                //qty2",
					"                pm.test(\"Qty2 = qty4 / conv2to4 = \" + qty3 * conversionProductMapping[2] + \" / \" + conversionProductMapping[2] + \" = \" + Math.round((qty3 * conversionProductMapping[2]) /conversionProductMapping[1]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty2).to.eql(Math.round((qty3 * conversionProductMapping[2]) /conversionProductMapping[1]))",
					"                })",
					"                ",
					"                //----------------------------------------------------------------------------------",
					"                //priceUOM3",
					"                pm.test(\"priceUOM3 = linePricePerItem = \" + priceUOM3 + \" = \" + linePricePerItem + \", karena uomOrder berisi UOM_3\",function(){",
					"                    pm.expect(priceUOM3).to.eql(linePricePerItem)",
					"                })",
					"                ",
					"                //priceUOM4",
					"                pm.test(\"priceUOM4 = linePricePerItem / conv3to4 = \" + priceUOM3 + \" / \" + conversionProductMapping[2] + \" = \" + (Math.trunc(priceUOM3 / conversionProductMapping[2])) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM4).to.be.closeTo(Math.trunc(priceUOM3 / conversionProductMapping[2]),Number(priceTolerance))",
					"                })",
					"",
					"                //priceUOM1",
					"                pm.test(\"priceUOM1 = priceUOM4 * conv1to4 = \" + priceUOM3 / conversionProductMapping[2] + \" * \" + conversionProductMapping[0] + \" = \" + (Math.trunc(priceUOM3 / conversionProductMapping[2]) * conversionProductMapping[0]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM1).to.be.closeTo(Math.trunc((priceUOM3 / conversionProductMapping[2]) * conversionProductMapping[0]),Number(priceTolerance))",
					"                })",
					"                ",
					"                //priceUOM2",
					"                pm.test(\"priceUOM2 = priceUOM4 * conv2to4 = \" + priceUOM3 / conversionProductMapping[2] + \" * \" + conversionProductMapping[2] + \" = \" + (Math.trunc(priceUOM3 / conversionProductMapping[2]) * conversionProductMapping[1]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM2).to.be.closeTo(Math.trunc((priceUOM3 / conversionProductMapping[2]) * conversionProductMapping[1]),Number(priceTolerance))",
					"                })",
					"            break",
					"            case \"UOM_4\":",
					"                //qty4",
					"                pm.test(\"Qty4 = qtyOrder = \" + qty4 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_4\",function(){",
					"                    pm.expect(qty4).to.eql(qtyOrder)",
					"                })",
					"                ",
					"                //qty3",
					"                pm.test(\"Qty3 = qty4 / conv3to4 = \" + qty4 + \" / \" + conversionProductMapping[2] + \" = \" + Math.round(qty4 / conversionProductMapping[2]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty3).to.eql(Math.round(qty4 / conversionProductMapping[2]))",
					"                })",
					"",
					"                //qty2",
					"                pm.test(\"Qty2 = qty4 / conv2to4 = \" + qty4 + \" / \" + conversionProductMapping[1] + \" = \" + Math.round(qty4 / conversionProductMapping[1]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty2).to.eql(Math.round(qty4 / conversionProductMapping[1]))",
					"                })",
					"",
					"                //qty1",
					"                pm.test(\"Qty1 = qty4 / conv1to4 = \" + qty4 + \" / \" + conversionProductMapping[0] + \" = \" + Math.round(qty4 / conversionProductMapping[0]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty1).to.eql(Math.round(qty4 / conversionProductMapping[0]))",
					"                })",
					"",
					"                //-----------------------------------------------------------------------------------",
					"                //priceUOM4",
					"                pm.test(\"priceUOM4 = linePricePerItem = \" + priceUOM4 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_4\",function(){",
					"                    pm.expect(priceUOM4).to.eql(linePricePerItem)",
					"                })",
					"                ",
					"                //priceUOM3",
					"                pm.test(\"priceUOM3 = priceUOM4 * conv3to4 = \" + priceUOM4 + \" * \" + conversionProductMapping[2] + \" = \" + (priceUOM4 * conversionProductMapping[2]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM3).to.be.closeTo((priceUOM4 * conversionProductMapping[2]),Number(priceTolerance))",
					"                })",
					"",
					"                //priceUOM2",
					"                pm.test(\"priceUOM2 = priceUOM4 * conv2to4 = \" + priceUOM4 + \" * \" + conversionProductMapping[1] + \" = \" + (priceUOM4 * conversionProductMapping[1]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM2).to.be.closeTo((priceUOM4 * conversionProductMapping[1]),Number(priceTolerance))",
					"                })",
					"",
					"                //priceUOM1",
					"                pm.test(\"priceUOM1 = priceUOM4 * conv1to4 = \" + priceUOM4 + \" * \" + conversionProductMapping[0] + \" = \" + (priceUOM4 * conversionProductMapping[0]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM1).to.be.closeTo((priceUOM4 * conversionProductMapping[0]),Number(priceTolerance))",
					"                })",
					"            break",
					"        }",
					"    },",
					"",
					"    checkQtyPriceuomDariDataProductPrincipal(id, uom1, uom2, uom3, uom4, uomProductPrincipal, uom_Order, qtyOrder, conversionProductPrincipal, qty1, qty2, qty3, qty4, linePricePerItem, priceUOM1, priceUOM2, priceUOM3, priceUOM4, priceTolerance){",
					"        // kalau product mapping gk ada, cek nya ke principal",
					"        pm.test(\"Pengecekan UOM pada PO Incoming Detail Id \" + id,function(){",
					"            pm.test(\"UOM_1 sudah sesuai dengan UOM_1 Product Mapping\",function(){",
					"                pm.expect(uom1).to.eql(uomProductPrincipal[0])",
					"            })",
					"            pm.test(\"UOM_2 sudah sesuai dengan UOM_2 Product Mapping\",function(){",
					"                pm.expect(uom2).to.eql(uomProductPrincipal[1])",
					"            })",
					"            pm.test(\"UOM_3 sudah sesuai dengan UOM_3 Product Mapping\",function(){",
					"                pm.expect(uom3).to.eql(uomProductPrincipal[2])",
					"            })",
					"            pm.test(\"UOM_4 sudah sesuai dengan UOM_4 Product Mapping\",function(){",
					"                pm.expect(uom4).to.eql(uomProductPrincipal[3])",
					"            })",
					"        })",
					"",
					"        //Pengecekan QTY1-3 dan PriceUOM1-4 dengan kalkulasi conversion dari Product Principal",
					"        switch(uom_Order){",
					"            case \"UOM_1\":",
					"                //qty1",
					"                pm.test(\"Qty1 = qtyOrder = \" + qty1 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_1\",function(){",
					"                    pm.expect(qty1).to.eql(qtyOrder)",
					"                })",
					"                ",
					"                //qty4",
					"                pm.test(\"Qty4 = qtyOrder * conv1to4 = \" + qty1 + \" * \" + conversionProductPrincipal[0] + \" = \" + (qty1 * conversionProductPrincipal[0]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty4).to.eql(qty1 * conversionProductPrincipal[0])",
					"                })",
					"",
					"                //qty2",
					"                pm.test(\"Qty2 = qty4 / conv2to4 = \" + qty1 * conversionProductPrincipal[0] + \" / \" + conversionProductPrincipal[1] + \" = \" + ((qty1 * conversionProductPrincipal[0]) /conversionProductPrincipal[1]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty2).to.eql((qty1 * conversionProductPrincipal[0]) / conversionProductPrincipal[1])",
					"                })",
					"                ",
					"                //qty3",
					"                pm.test(\"Qty3 = qty4 / conv3to4 = \" + qty1 * conversionProductPrincipal[0] + \" / \" + conversionProductPrincipal[2] + \" = \" + ((qty1 * conversionProductPrincipal[0]) /conversionProductPrincipal[2]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty3).to.eql((qty1 * conversionProductPrincipal[0]) / conversionProductPrincipal[2])",
					"                })",
					"",
					"                //----------------------------------------------------------------------------------",
					"                //priceUOM1",
					"                pm.test(\"priceUOM1 = linePricePerItem = \" + priceUOM1 + \" = \" + linePricePerItem + \", karena uomOrder berisi UOM_1\",function(){",
					"                    pm.expect(priceUOM1).to.eql(linePricePerItem)",
					"                })",
					"                ",
					"                //priceUOM4",
					"                pm.test(\"priceUOM4 = linePricePerItem / conv1to4 = \" + priceUOM1 + \" / \" + conversionProductPrincipal[0] + \" = \" + (Math.trunc(priceUOM1 / conversionProductPrincipal[0])) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM4).to.be.closeTo(Math.trunc(priceUOM1 / conversionProductPrincipal[0]), Number(priceTolerance))",
					"                })",
					"",
					"                //priceUOM2",
					"                pm.test(\"priceUOM2 = priceUOM4 * conv2to4 = \" + priceUOM1 / conversionProductPrincipal[0] + \" * \" + conversionProductPrincipal[1] + \" = \" + (Math.trunc(priceUOM1 / conversionProductPrincipal[0]) * conversionProductPrincipal[1]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM2).to.be.closeTo(Math.trunc((priceUOM1 / conversionProductPrincipal[0]) * conversionProductPrincipal[1]),Number(priceTolerance))",
					"                })",
					"                ",
					"                //priceUOM3",
					"                pm.test(\"priceUOM3 = priceUOM4 * conv3to4 = \" + priceUOM1 / conversionProductPrincipal[0] + \" * \" + conversionProductPrincipal[2] + \" = \" + (Math.trunc(priceUOM1 / conversionProductPrincipal[0]) * conversionProductPrincipal[2]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM3).to.be.closeTo(Math.trunc((priceUOM1 / conversionProductPrincipal[0]) * conversionProductPrincipal[2]),Number(priceTolerance))",
					"                })",
					"            break",
					"            case \"UOM_2\":",
					"                //qty2",
					"                pm.test(\"Qty2 = qtyOrder = \" + qty2 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_2\",function(){",
					"                    pm.expect(qty2).to.eql(qtyOrder)",
					"                })",
					"                ",
					"                //qty4",
					"                pm.test(\"Qty4 = qtyOrder * conv2to4 = \" + qty2 + \" * \" + conversionProductPrincipal[1] + \" = \" + (qty2 * conversionProductPrincipal[1]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty4).to.eql(qty2 * conversionProductPrincipal[1])",
					"                })",
					"",
					"                //qty1",
					"                pm.test(\"Qty1 = qty4 / conv1to4 = \" + qty2 * conversionProductPrincipal[1] + \" / \" + conversionProductPrincipal[0] + \" = \" + ((qty2 * conversionProductPrincipal[1]) /conversionProductPrincipal[0]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty1).to.eql((qty2 * conversionProductPrincipal[1]) / conversionProductPrincipal[0])",
					"                })",
					"                ",
					"                //qty3",
					"                pm.test(\"Qty3 = qty4 / conv3to4 = \" + qty2 * conversionProductPrincipal[1] + \" / \" + conversionProductPrincipal[2] + \" = \" + ((qty2 * conversionProductPrincipal[1])/conversionProductPrincipal[2]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty3).to.eql((qty2 * conversionProductPrincipal[1]) /conversionProductPrincipal[2])",
					"                })",
					"                ",
					"                //----------------------------------------------------------------------------------",
					"                //priceuom2",
					"                pm.test(\"priceUOM2 = linePricePerItem = \" + priceUOM2 + \" = \" + linePricePerItem + \", karena uomOrder berisi UOM_2\",function(){",
					"                    pm.expect(priceUOM2).to.eql(linePricePerItem)",
					"                })",
					"                ",
					"                //priceuom4",
					"                pm.test(\"priceUOM4 = linePricePerItem / conv2to4 = \" + priceUOM2 + \" / \" + conversionProductPrincipal[1] + \" = \" + (Math.trunc(priceUOM2 / conversionProductPrincipal[1])) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM4).to.be.closeTo(Math.trunc(priceUOM2 / conversionProductPrincipal[1]),Number(priceTolerance))",
					"                })",
					"",
					"                //priceuom1",
					"                pm.test(\"priceUOM1 = priceUOM4 * conv1to4 = \" + priceUOM2 / conversionProductPrincipal[1] + \" * \" + conversionProductPrincipal[0] + \" = \" + (Math.trunc(priceUOM2 / conversionProductPrincipal[1]) * conversionProductPrincipal[0]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(Math.trunc(priceUOM1)).to.be.closeTo(Math.trunc((priceUOM2 / conversionProductPrincipal[1]) * conversionProductPrincipal[0]), Number(priceTolerance))",
					"                })",
					"                ",
					"                //priceuom3",
					"                pm.test(\"priceUOM3 = priceUOM4 * conv3to4 = \" + priceUOM2 / conversionProductPrincipal[1] + \" * \" + conversionProductPrincipal[2] + \" = \" + (Math.trunc(priceUOM2 / conversionProductPrincipal[1]) * conversionProductPrincipal[2]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM3).to.be.closeTo(Math.trunc((priceUOM2 / conversionProductPrincipal[1]) * conversionProductPrincipal[2]),Number(priceTolerance))",
					"                })",
					"            break",
					"            case \"UOM_3\":",
					"                //qty3",
					"                pm.test(\"Qty3 = qtyOrder = \" + qty3 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_3\",function(){",
					"                    pm.expect(qty3).to.eql(qtyOrder)",
					"                })",
					"                ",
					"                //qty4",
					"                pm.test(\"Qty4 = qtyOrder * conv3to4 = \" + qty3 + \" * \" + conversionProductPrincipal[2] + \" = \" + (qty3 * conversionProductPrincipal[2]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty4).to.eql(qty3 * conversionProductPrincipal[2])",
					"                })",
					"",
					"                //qty1",
					"                pm.test(\"Qty1 = qty4 / conv1to4 = \" + qty3 * conversionProductPrincipal[2] + \" / \" + conversionProductPrincipal[0] + \" = \" + ((qty3 * conversionProductPrincipal[2]) /conversionProductPrincipal[0]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty1).to.eql((qty3 * conversionProductPrincipal[2] )/conversionProductPrincipal[0])",
					"                })",
					"                ",
					"                //qty2",
					"                pm.test(\"Qty2 = qty4 / conv2to4 = \" + qty3 * conversionProductPrincipal[2] + \" / \" + conversionProductPrincipal[2] + \" = \" + ((qty3 * conversionProductPrincipal[2]) /conversionProductPrincipal[1]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(qty2).to.eql((qty3 * conversionProductPrincipal[2]) /conversionProductPrincipal[1])",
					"                })",
					"                ",
					"                //----------------------------------------------------------------------------------",
					"                //priceUOM3",
					"                pm.test(\"priceUOM3 = linePricePerItem = \" + priceUOM3 + \" = \" + linePricePerItem + \", karena uomOrder berisi UOM_3\",function(){",
					"                    pm.expect(priceUOM3).to.eql(linePricePerItem)",
					"                })",
					"                ",
					"                //priceUOM4",
					"                pm.test(\"priceUOM4 = linePricePerItem / conv3to4 = \" + priceUOM3 + \" / \" + conversionProductPrincipal[2] + \" = \" + (Math.trunc(priceUOM3 / conversionProductPrincipal[2])) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM4).to.be.closeTo(Math.trunc(priceUOM3 / conversionProductPrincipal[2]),Number(priceTolerance))",
					"                })",
					"",
					"                //priceUOM1",
					"                pm.test(\"priceUOM1 = priceUOM4 * conv1to4 = \" + priceUOM3 / conversionProductPrincipal[2] + \" * \" + conversionProductPrincipal[0] + \" = \" + (Math.trunc(priceUOM3 / conversionProductPrincipal[2]) * conversionProductPrincipal[0]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM1).to.be.closeTo(Math.trunc((priceUOM3 / conversionProductPrincipal[2]) * conversionProductPrincipal[0]),Number(priceTolerance))",
					"                })",
					"                ",
					"                //priceUOM2",
					"                pm.test(\"priceUOM2 = priceUOM4 * conv2to4 = \" + priceUOM3 / conversionProductPrincipal[2] + \" * \" + conversionProductPrincipal[2] + \" = \" + (Math.trunc(priceUOM3 / conversionProductPrincipal[2]) * conversionProductPrincipal[1]) + \",Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM2).to.be.closeTo(Math.trunc((priceUOM3 / conversionProductPrincipal[2]) * conversionProductPrincipal[1]),Number(priceTolerance))",
					"                })",
					"            break",
					"            case \"UOM_4\":",
					"                //qty4",
					"                pm.test(\"Qty4 = qtyOrder = \" + qty4 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_4\",function(){",
					"                    pm.expect(qty4).to.eql(qtyOrder)",
					"                })",
					"                ",
					"                //qty3",
					"                pm.test(\"Qty3 = qty4 / conv3to4 = \" + qty4 + \" / \" + conversionProductPrincipal[2] + \" = \" + (qty4 / conversionProductPrincipal[2]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty3).to.eql(qty4 / conversionProductPrincipal[2])",
					"                })",
					"",
					"                //qty2",
					"                pm.test(\"Qty2 = qty4 / conv2to4 = \" + qty4 + \" / \" + conversionProductPrincipal[1] + \" = \" + (qty4 / conversionProductPrincipal[1]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty2).to.eql(qty4 / conversionProductPrincipal[1])",
					"                })",
					"",
					"                //qty1",
					"                pm.test(\"Qty1 = qty4 / conv1to4 = \" + qty4 + \" / \" + conversionProductPrincipal[0] + \" = \" + (qty4 / conversionProductPrincipal[0]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(qty1).to.eql(qty4 / conversionProductPrincipal[0])",
					"                })",
					"",
					"                //-----------------------------------------------------------------------------------",
					"                //priceUOM4",
					"                pm.test(\"priceUOM4 = linePricePerItem = \" + priceUOM4 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_4\",function(){",
					"                    pm.expect(priceUOM4).to.eql(linePricePerItem)",
					"                })",
					"                ",
					"                //priceUOM3",
					"                pm.test(\"priceUOM3 = priceUOM4 * conv3to4 = \" + priceUOM4 + \" * \" + conversionProductPrincipal[2] + \" = \" + (priceUOM4 * conversionProductPrincipal[2]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM3).to.be.closeTo((priceUOM4 * conversionProductPrincipal[2]),Number(priceTolerance))",
					"                })",
					"",
					"                //priceUOM2",
					"                pm.test(\"priceUOM2 = priceUOM4 * conv2to4 = \" + priceUOM4 + \" * \" + conversionProductPrincipal[1] + \" = \" + (priceUOM4 * conversionProductPrincipal[1]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM2).to.be.closeTo((priceUOM4 * conversionProductPrincipal[1]),Number(priceTolerance))",
					"                })",
					"",
					"                //priceUOM1",
					"                pm.test(\"priceUOM1 = priceUOM4 * conv1to4 = \" + priceUOM4 + \" * \" + conversionProductPrincipal[0] + \" = \" + (priceUOM4 * conversionProductPrincipal[0]) + \" ,Sudah Sesuai\",function(){",
					"                    pm.expect(priceUOM1).to.be.closeTo((priceUOM4 * conversionProductPrincipal[0]),Number(priceTolerance))",
					"                })",
					"            break",
					"        }",
					"    },",
					"",
					"    checkQtyPriceuomConversionFromPO(id, uom1, uomProductPrincipal, uomProductMapping, uom_Order, qtyOrder, conversionProductPrincipal, conversionProductMapping, qty1, qty2, qty3, qty4, linePricePerItem, priceUOM1, priceUOM2, priceUOM3, priceUOM4, priceTolerance){",
					"",
					"        var qty4Temp,qty3Temp,qty2Temp, priceUom4Temp,priceUom3Temp,priceUom2Temp",
					"",
					"        uomTemp = [uomProductPrincipal[0], uomProductMapping[0]]",
					"        qty4Temp = [qty1 * conversionProductPrincipal[0], qty1 * conversionProductMapping[0]]",
					"        qty2Temp = [qty4Temp[0] / conversionProductPrincipal[1], qty4Temp[1] / conversionProductMapping[1]]",
					"        qty3Temp = [qty4Temp[0] / conversionProductPrincipal[2], qty4Temp[1] / conversionProductMapping[2]]",
					"        ",
					"        priceUom4Temp = [Math.trunc(priceUOM1 / conversionProductPrincipal[0]), Math.trunc(priceUOM1 / conversionProductMapping[0])]",
					"        priceUom2Temp = [Math.trunc(priceUom4Temp[0] * conversionProductPrincipal[1]), Math.trunc(priceUom4Temp[1] * conversionProductMapping[1])]",
					"        priceUom3Temp = [Math.trunc(priceUom4Temp[0] * conversionProductPrincipal[2]), Math.trunc(priceUom4Temp[1] * conversionProductMapping[2])]",
					"",
					"        if(!qty4Temp.includes(qty4)){",
					"            ",
					"            console.log(\"conversion yang tepat ada dari PO!\")",
					"            var conversionFromPo1to4, conversionFromPo2to4, conversionFromPo3to4",
					"",
					"            conversionFromPo1to4 = qty4 / qty1",
					"            conversionFromPo2to4 = qty4 / qty2",
					"            conversionFromPo3to4 = qty4 / qty3",
					"",
					"            qty4Temp = [qty1 * conversionFromPo1to4]",
					"            qty2Temp = [qty4Temp / conversionFromPo2to4]",
					"            qty3Temp = [qty4Temp / conversionFromPo3to4]",
					"",
					"            priceUom4Temp = [Math.trunc(priceUOM1 / conversionFromPo1to4)]",
					"            priceUom2Temp = [Math.trunc(priceUom4Temp * conversionFromPo2to4)]",
					"            priceUom3Temp = [Math.trunc(priceUom4Temp * conversionFromPo3to4)]",
					"",
					"        } ",
					"",
					"        pm.test(\"Pengecekan UOM pada PO Incoming Detail Id \" + id,function(){",
					"            pm.test(\"UOM_1 sudah sesuai dengan UOM_1 Product Mapping\",function(){",
					"                pm.expect(uom1).to.be.oneOf(uomTemp)",
					"            })",
					"        })",
					"",
					"        pm.test(\"Qty1 = qtyOrder = \" + qty1 + \" = \" + qtyOrder + \", karena uomOrder berisi UOM_1\",function(){",
					"            pm.expect(qty1).to.eql(qtyOrder)",
					"        })",
					"",
					"        pm.test(\"Qty4 ada antara perhitungan dengan conversion Product Principal atau conversion Product Mapping\",function(){",
					"            pm.expect(qty4).to.be.oneOf(qty4Temp)",
					"        })",
					"",
					"        pm.test(\"Qty2 ada antara perhitungan dengan conversion Product Principal atau conversion Product Mapping\",function(){",
					"            pm.expect(qty2).to.be.oneOf(qty2Temp)",
					"        })",
					"        ",
					"        pm.test(\"Qty2 ada antara perhitungan dengan conversion Product Principal atau conversion Product Mapping\",function(){",
					"            pm.expect(qty3).to.be.oneOf(qty3Temp)",
					"        })",
					"",
					"",
					"        pm.test(\"priceUOM1 = linePricePerItem = \" + priceUOM1 + \" = \" + linePricePerItem + \", karena uomOrder berisi UOM_1\",function(){",
					"            pm.expect(priceUOM1).to.eql(linePricePerItem)",
					"        })",
					"",
					"        pm.test(\"priceUOM4 ada antara perhitungan dengan conversion Product Principal atau conversion Product Mapping\",function(){",
					"            pm.expect(Math.trunc(priceUOM4)).to.be.oneOf(priceUom4Temp)",
					"            // pm.expect(priceUOM4).to.be.closeTo(priceUom4Temp[0],Number(priceTolerance))",
					"            // pm.expect(priceUOM4).to.be.closeTo(priceUom4Temp[1],Number(priceTolerance))",
					"        })",
					"",
					"        pm.test(\"priceUOM2 ada antara perhitungan dengan conversion Product Principal atau conversion Product Mapping\",function(){",
					"            pm.expect(Math.trunc(priceUOM2)).to.be.oneOf(priceUom2Temp)",
					"            // pm.expect(priceUOM2).to.be.closeTo(priceUom2Temp[0],Number(priceTolerance))",
					"            // pm.expect(priceUOM2).to.be.closeTo(priceUom2Temp[1],Number(priceTolerance))",
					"        })",
					"        ",
					"        pm.test(\"priceUOM3 ada antara perhitungan dengan conversion Product Principal atau conversion Product Mapping\",function(){",
					"            pm.expect(Math.trunc(priceUOM3)).to.be.oneOf(priceUom3Temp)",
					"            // pm.expect(priceUOM3).to.be.closeTo(priceUom3Temp[0],Number(priceTolerance))",
					"            // pm.expect(priceUOM3).to.be.closeTo(priceUom3Temp[1],Number(priceTolerance))",
					"        })",
					"        ",
					"    }",
					"}",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f5d65cb7-947a-4501-a01c-af11b667bdb6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}